From: postbox@lisdatacenter.org
Subject: job 468811 de
Date: June 27, 2017 at 3:37:18 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("de") 
[1] "Loading dataset de73h..."
de73h,market_hh,0.4713,0.002,100
de73h,market_sqrt,0.377,0.0016,100
de73h,market_pc,0.4057,0.0017,100
de73h,disp_hh,0.332,0.0016,100
de73h,disp_sqrt,0.2716,0.0014,100
de73h,disp_pc,0.2995,0.0014,100
[1] "Loading dataset de78h..."
de78h,market_hh,0.5131,0.0023,100
de78h,market_sqrt,0.4134,0.002,100
de78h,market_pc,0.439,0.0019,100
de78h,disp_hh,0.3311,0.0018,100
de78h,disp_sqrt,0.2621,0.0013,100
de78h,disp_pc,0.2843,0.0016,100
[1] "Loading dataset de81h..."
de81h,market_hh,0.5048,0.0085,100
de81h,market_sqrt,0.4067,0.0063,100
de81h,market_pc,0.4488,0.0075,100
de81h,disp_hh,0.3082,0.0052,100
de81h,disp_sqrt,0.2439,0.0049,100
de81h,disp_pc,0.2813,0.0041,100
[1] "Loading dataset de83h..."
de83h,market_hh,0.5077,0.0023,100
de83h,market_sqrt,0.4146,0.0024,100
de83h,market_pc,0.4397,0.0022,100
de83h,disp_hh,0.3273,0.0016,100
de83h,disp_sqrt,0.2603,0.0017,100
de83h,disp_pc,0.2842,0.0015,100
[1] "Loading dataset de84h..."
de84h,market_hh,0.5368,0.0067,120
de84h,market_sqrt,0.44,0.0061,120
de84h,market_pc,0.4738,0.0051,120
de84h,disp_hh,0.3351,0.0042,120
de84h,disp_sqrt,0.2647,0.0039,120
de84h,disp_pc,0.2911,0.0043,120
[1] "Loading dataset de89h..."
de89h,market_hh,0.5326,0.0065,120
de89h,market_sqrt,0.4355,0.0066,120
de89h,market_pc,0.4693,0.0069,120
de89h,disp_hh,0.3292,0.0054,120
de89h,disp_sqrt,0.2583,0.0049,120
de89h,disp_pc,0.2858,0.0052,120
[1] "Loading dataset de94h..."
de94h,market_hh,0.5414,0.0068,120
de94h,market_sqrt,0.4579,0.005,120
de94h,market_pc,0.4918,0.0056,120
de94h,disp_hh,0.3314,0.0041,120
de94h,disp_sqrt,0.2697,0.0045,120
de94h,disp_pc,0.2998,0.0053,120
[1] "Loading dataset de00h..."
de00h,market_hh,0.5502,0.0036,120
de00h,market_sqrt,0.4725,0.004,120
de00h,market_pc,0.5052,0.0044,120
de00h,disp_hh,0.3309,0.0032,120
de00h,disp_sqrt,0.2657,0.0031,120
de00h,disp_pc,0.2934,0.0032,120
[1] "Loading dataset de04h..."
de04h,market_hh,0.5686,0.0044,120
de04h,market_sqrt,0.4976,0.0048,120
de04h,market_pc,0.5289,0.0044,120
de04h,disp_hh,0.3366,0.0032,120
de04h,disp_sqrt,0.2777,0.003,120
de04h,disp_pc,0.3048,0.003,120
[1] "Loading dataset de07h..."
de07h,market_hh,0.5942,0.0048,120
de07h,market_sqrt,0.5149,0.0057,120
de07h,market_pc,0.5443,0.0064,120
de07h,disp_hh,0.3549,0.0047,120
de07h,disp_sqrt,0.291,0.004,120
de07h,disp_pc,0.3163,0.004,120
[1] "Loading dataset de10h..."
de10h,market_hh,0.5965,0.0044,120
de10h,market_sqrt,0.5154,0.0043,120
de10h,market_pc,0.5381,0.0042,120
de10h,disp_hh,0.3531,0.0033,120
de10h,disp_sqrt,0.2857,0.0033,120
de10h,disp_pc,0.3033,0.0033,120
[1] "Loading dataset de13h..."
de13h,market_hh,0.5992,0.0039,120
de13h,market_sqrt,0.5221,0.0039,120
de13h,market_pc,0.5444,0.0042,120
de13h,disp_hh,0.3544,0.0031,120
de13h,disp_sqrt,0.2915,0.0031,120
de13h,disp_pc,0.311,0.0035,120
> 
> proc.time()
   user  system elapsed 
191.779   0.514 215.833 


