From: postbox@lisdatacenter.org
Subject: job 468842 se
Date: June 27, 2017 at 4:41:10 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("se") 
[1] "Loading dataset se67h..."
se67h,market_hh,0.5204,0.0043,110
se67h,market_sqrt,0.4241,0.0041,110
se67h,market_pc,0.4591,0.0049,110
se67h,disp_hh,0.4141,0.0045,110
se67h,disp_sqrt,0.3041,0.0041,110
se67h,disp_pc,0.3396,0.0036,110
[1] "Loading dataset se75h..."
se75h,market_hh,0.4947,0.0057,110
se75h,market_sqrt,0.4016,0.004,110
se75h,market_pc,0.4366,0.0044,110
se75h,disp_hh,0.3148,0.0029,110
se75h,disp_sqrt,0.2179,0.0022,110
se75h,disp_pc,0.2451,0.0021,110
[1] "Loading dataset se81h..."
se81h,market_hh,0.5136,0.0063,110
se81h,market_sqrt,0.4165,0.0059,110
se81h,market_pc,0.4439,0.0055,110
se81h,disp_hh,0.2922,0.004,110
se81h,disp_sqrt,0.2018,0.004,110
se81h,disp_pc,0.2329,0.0032,110
[1] "Loading dataset se87h..."
se87h,market_hh,0.5281,0.0054,110
se87h,market_sqrt,0.4313,0.0048,110
se87h,market_pc,0.4551,0.005,110
se87h,disp_hh,0.3196,0.0042,110
se87h,disp_sqrt,0.215,0.0031,110
se87h,disp_pc,0.2353,0.0037,110
[1] "Loading dataset se92h..."
se92h,market_hh,0.5579,0.0043,110
se92h,market_sqrt,0.4674,0.0045,110
se92h,market_pc,0.4918,0.0042,110
se92h,disp_hh,0.3328,0.0032,110
se92h,disp_sqrt,0.2328,0.0027,110
se92h,disp_pc,0.2539,0.0026,110
[1] "Loading dataset se95h..."
se95h,market_hh,0.5807,0.003,110
se95h,market_sqrt,0.4938,0.0032,110
se95h,market_pc,0.5193,0.0034,110
se95h,disp_hh,0.3231,0.0023,110
se95h,disp_sqrt,0.2233,0.0023,110
se95h,disp_pc,0.2549,0.0019,110
[1] "Loading dataset se00h..."
se00h,market_hh,0.5661,0.0032,110
se00h,market_sqrt,0.471,0.0035,110
se00h,market_pc,0.4972,0.003,110
se00h,disp_hh,0.3448,0.0027,110
se00h,disp_sqrt,0.2513,0.0024,110
se00h,disp_pc,0.2696,0.0022,110
[1] "Loading dataset se05h..."
se05h,market_hh,0.5571,0.0028,110
se05h,market_sqrt,0.4665,0.003,110
se05h,market_pc,0.4926,0.0033,110
se05h,disp_hh,0.3269,0.0018,110
se05h,disp_sqrt,0.2365,0.0021,110
se05h,disp_pc,0.258,0.0023,110
> 
> proc.time()
   user  system elapsed 
 76.240   0.246  80.311 


