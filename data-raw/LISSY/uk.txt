From: <postbox@lisdatacenter.org>
Subject: job 770315 uk
Date: October 9, 2020 at 1:22:14 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("uk") 
[1] "Loading dataset uk69h..."
uk69h,market_hh,0.4226,0.0043,100
uk69h,market_sqrt,0.3616,0.005,100
uk69h,market_pc,0.4292,0.0045,100
uk69h,market_oecdm,0.4451,0.0062,100
uk69h,market_ae,0.4456,0.0068,100
uk69h,gross_hh,0.3357,0.0038,100
uk69h,gross_sqrt,0.2953,0.0038,100
uk69h,gross_pc,0.3618,0.0036,100
uk69h,gross_oecdm,0.316,0.0059,100
uk69h,gross_ae,0.3116,0.006,100
uk69h,disp_hh,0.3129,0.0033,100
uk69h,disp_sqrt,0.2678,0.0032,100
uk69h,disp_pc,0.3362,0.0035,100
uk69h,disp_oecdm,0.2834,0.0049,100
uk69h,disp_ae,0.2777,0.0043,100
uk69h,con_hh,NaN,NA,100
uk69h,con_sqrt,NaN,NA,100
uk69h,con_pc,NaN,NA,100
uk69h,con_oecdm,NaN,NA,100
uk69h,con_ae,NaN,NA,100
[1] "Loading dataset uk74h..."
uk74h,market_hh,0.4349,0.0045,100
uk74h,market_sqrt,0.3621,0.0041,100
uk74h,market_pc,0.3996,0.0044,100
uk74h,gross_hh,0.3499,0.0035,100
uk74h,gross_sqrt,0.2951,0.0037,100
uk74h,gross_pc,0.3264,0.0038,100
uk74h,disp_hh,0.327,0.0035,100
uk74h,disp_sqrt,0.2684,0.0029,100
uk74h,disp_pc,0.3001,0.0035,100
uk74h,con_hh,NaN,NA,100
uk74h,con_sqrt,NaN,NA,100
uk74h,con_pc,NaN,NA,100
[1] "Loading dataset uk79h..."
uk79h,market_hh,0.4889,0.0048,100
uk79h,market_sqrt,0.4107,0.0041,100
uk79h,market_pc,0.4439,0.005,100
uk79h,market_oecdm,0.4057,0.0042,100
uk79h,market_ae,0.4154,0.0037,100
uk79h,gross_hh,0.3621,0.0031,100
uk79h,gross_sqrt,0.2954,0.0029,100
uk79h,gross_pc,0.3147,0.0028,100
uk79h,gross_oecdm,0.2873,0.0027,100
uk79h,gross_ae,0.2916,0.0031,100
uk79h,disp_hh,0.3353,0.0031,100
uk79h,disp_sqrt,0.2671,0.0024,100
uk79h,disp_pc,0.2861,0.0024,100
uk79h,disp_oecdm,0.258,0.0027,100
uk79h,disp_ae,0.2615,0.0028,100
uk79h,con_hh,NaN,NA,100
uk79h,con_sqrt,NaN,NA,100
uk79h,con_pc,NaN,NA,100
uk79h,con_oecdm,NaN,NA,100
uk79h,con_ae,NaN,NA,100
[1] "Loading dataset uk86h..."
uk86h,market_hh,0.5687,0.0044,100
uk86h,market_sqrt,0.5023,0.0045,100
uk86h,market_pc,0.5282,0.0042,100
uk86h,market_oecdm,0.4973,0.0041,100
uk86h,market_ae,0.5045,0.0047,100
uk86h,gross_hh,0.3922,0.0034,100
uk86h,gross_sqrt,0.341,0.0034,100
uk86h,gross_pc,0.3594,0.0035,100
uk86h,gross_oecdm,0.3328,0.0032,100
uk86h,gross_ae,0.3364,0.0037,100
uk86h,disp_hh,0.3547,0.0029,100
uk86h,disp_sqrt,0.304,0.0035,100
uk86h,disp_pc,0.3263,0.0037,100
uk86h,disp_oecdm,0.295,0.0032,100
uk86h,disp_ae,0.2994,0.0036,100
uk86h,con_hh,0.3823,0.0031,100
uk86h,con_sqrt,0.3236,0.003,100
uk86h,con_pc,0.3388,0.0033,100
uk86h,con_oecdm,0.3146,0.0031,100
uk86h,con_ae,0.3176,0.0029,100
[1] "Loading dataset uk91h..."
uk91h,market_hh,0.5662,0.0058,100
uk91h,market_sqrt,0.5053,0.0062,100
uk91h,market_pc,0.5301,0.0052,100
uk91h,market_oecdm,0.5051,0.0058,100
uk91h,market_ae,0.5126,0.0049,100
uk91h,gross_hh,0.4185,0.0045,100
uk91h,gross_sqrt,0.3709,0.0047,100
uk91h,gross_pc,0.3892,0.0051,100
uk91h,gross_oecdm,0.3665,0.0051,100
uk91h,gross_ae,0.3717,0.0046,100
uk91h,disp_hh,0.3889,0.0051,100
uk91h,disp_sqrt,0.3403,0.0052,100
uk91h,disp_pc,0.3615,0.0059,100
uk91h,disp_oecdm,0.3351,0.0052,100
uk91h,disp_ae,0.3411,0.0055,100
uk91h,con_hh,0.4183,0.0045,100
uk91h,con_sqrt,0.3607,0.0052,100
uk91h,con_pc,0.3757,0.0046,100
uk91h,con_oecdm,0.3562,0.0049,100
uk91h,con_ae,0.3598,0.0046,100
[1] "Loading dataset uk94h..."
uk94h,market_hh,0.6049,0.0027,100
uk94h,market_sqrt,0.5412,0.003,100
uk94h,market_pc,0.565,0.0032,100
uk94h,market_oecdm,0.5426,0.0027,100
uk94h,market_ae,0.5494,0.0032,100
uk94h,gross_hh,0.4213,0.0022,100
uk94h,gross_sqrt,0.3716,0.0023,100
uk94h,gross_pc,0.3883,0.0026,100
uk94h,gross_oecdm,0.3676,0.0027,100
uk94h,gross_ae,0.372,0.0023,100
uk94h,disp_hh,0.3922,0.0026,100
uk94h,disp_sqrt,0.3424,0.0028,100
uk94h,disp_pc,0.3621,0.0026,100
uk94h,disp_oecdm,0.3374,0.0028,100
uk94h,disp_ae,0.3427,0.0026,100
uk94h,con_hh,NaN,NA,100
uk94h,con_sqrt,NaN,NA,100
uk94h,con_pc,NaN,NA,100
uk94h,con_oecdm,NaN,NA,100
uk94h,con_ae,NaN,NA,100
[1] "Loading dataset uk95h..."
uk95h,market_hh,0.5976,0.0048,100
uk95h,market_sqrt,0.5413,0.005,100
uk95h,market_pc,0.5629,0.0057,100
uk95h,market_oecdm,0.542,0.0052,100
uk95h,market_ae,0.5481,0.0052,100
uk95h,gross_hh,0.4219,0.0044,100
uk95h,gross_sqrt,0.3808,0.0046,100
uk95h,gross_pc,0.3976,0.0048,100
uk95h,gross_oecdm,0.3768,0.0044,100
uk95h,gross_ae,0.3811,0.0043,100
uk95h,disp_hh,0.3875,0.0038,100
uk95h,disp_sqrt,0.3464,0.0045,100
uk95h,disp_pc,0.366,0.0046,100
uk95h,disp_oecdm,0.3412,0.0042,100
uk95h,disp_ae,0.3464,0.0043,100
uk95h,con_hh,0.3738,0.003,100
uk95h,con_sqrt,0.3201,0.0032,100
uk95h,con_pc,0.3415,0.0036,100
uk95h,con_oecdm,0.3161,0.0034,100
uk95h,con_ae,0.3216,0.0036,100
[1] "Loading dataset uk99h..."
uk99h,market_hh,0.6031,0.003,100
uk99h,market_sqrt,0.5406,0.0031,100
uk99h,market_pc,0.5641,0.0031,100
uk99h,market_oecdm,0.5419,0.0031,100
uk99h,market_ae,0.5486,0.0033,100
uk99h,gross_hh,0.4253,0.0023,100
uk99h,gross_sqrt,0.3784,0.0029,100
uk99h,gross_pc,0.3949,0.0026,100
uk99h,gross_oecdm,0.3744,0.003,100
uk99h,gross_ae,0.3787,0.0029,100
uk99h,disp_hh,0.4007,0.003,100
uk99h,disp_sqrt,0.3522,0.0033,100
uk99h,disp_pc,0.3717,0.0029,100
uk99h,disp_oecdm,0.3475,0.0031,100
uk99h,disp_ae,0.3526,0.0029,100
uk99h,con_hh,NaN,NA,100
uk99h,con_sqrt,NaN,NA,100
uk99h,con_pc,NaN,NA,100
uk99h,con_oecdm,NaN,NA,100
uk99h,con_ae,NaN,NA,100
[1] "Loading dataset uk04h..."
uk04h,market_hh,0.6002,0.003,100
uk04h,market_sqrt,0.5396,0.0031,100
uk04h,market_pc,0.564,0.0031,100
uk04h,market_oecdm,0.5415,0.0031,100
uk04h,market_ae,0.5484,0.003,100
uk04h,gross_hh,0.4201,0.0027,100
uk04h,gross_sqrt,0.3735,0.0029,100
uk04h,gross_pc,0.3917,0.0029,100
uk04h,gross_oecdm,0.3709,0.003,100
uk04h,gross_ae,0.3753,0.003,100
uk04h,disp_hh,0.4008,0.0031,100
uk04h,disp_sqrt,0.3526,0.0034,100
uk04h,disp_pc,0.3726,0.0034,100
uk04h,disp_oecdm,0.3492,0.003,100
uk04h,disp_ae,0.3542,0.0034,100
uk04h,con_hh,NaN,NA,100
uk04h,con_sqrt,NaN,NA,100
uk04h,con_pc,NaN,NA,100
uk04h,con_oecdm,NaN,NA,100
uk04h,con_ae,NaN,NA,100
[1] "Loading dataset uk07h..."
uk07h,market_hh,0.5977,0.0028,110
uk07h,market_sqrt,0.5337,0.003,110
uk07h,market_pc,0.5544,0.003,110
uk07h,market_oecdm,0.5347,0.0034,110
uk07h,market_ae,0.5405,0.0027,110
uk07h,gross_hh,0.4226,0.0027,110
uk07h,gross_sqrt,0.3748,0.0027,110
uk07h,gross_pc,0.3884,0.0029,110
uk07h,gross_oecdm,0.3714,0.003,110
uk07h,gross_ae,0.3744,0.0026,110
uk07h,disp_hh,0.3889,0.0028,110
uk07h,disp_sqrt,0.3423,0.003,110
uk07h,disp_pc,0.362,0.0029,110
uk07h,disp_oecdm,0.3389,0.003,110
uk07h,disp_ae,0.3437,0.0031,110
uk07h,con_hh,NaN,NA,110
uk07h,con_sqrt,NaN,NA,110
uk07h,con_pc,NaN,NA,110
uk07h,con_oecdm,NaN,NA,110
uk07h,con_ae,NaN,NA,110
[1] "Loading dataset uk10h..."
uk10h,market_hh,0.6191,0.0029,110
uk10h,market_sqrt,0.5545,0.003,110
uk10h,market_pc,0.5731,0.0031,110
uk10h,market_oecdm,0.5559,0.0032,110
uk10h,market_ae,0.5608,0.0031,110
uk10h,gross_hh,0.4211,0.0025,110
uk10h,gross_sqrt,0.3738,0.003,110
uk10h,gross_pc,0.3861,0.0029,110
uk10h,gross_oecdm,0.3708,0.0028,110
uk10h,gross_ae,0.373,0.0027,110
uk10h,disp_hh,0.3862,0.0025,110
uk10h,disp_sqrt,0.3385,0.0033,110
uk10h,disp_pc,0.3558,0.0029,110
uk10h,disp_oecdm,0.3353,0.003,110
uk10h,disp_ae,0.339,0.0032,110
uk10h,con_hh,NaN,NA,110
uk10h,con_sqrt,NaN,NA,110
uk10h,con_pc,NaN,NA,110
uk10h,con_oecdm,NaN,NA,110
uk10h,con_ae,NaN,NA,110
[1] "Loading dataset uk13h..."
uk13h,market_hh,0.6119,0.0032,110
uk13h,market_sqrt,0.5491,0.0042,110
uk13h,market_pc,0.5674,0.0031,110
uk13h,market_oecdm,0.5499,0.0036,110
uk13h,market_ae,0.5549,0.0035,110
uk13h,gross_hh,0.4131,0.0029,110
uk13h,gross_sqrt,0.3673,0.0038,110
uk13h,gross_pc,0.382,0.003,110
uk13h,gross_oecdm,0.3639,0.0028,110
uk13h,gross_ae,0.3673,0.0033,110
uk13h,disp_hh,0.3802,0.0032,110
uk13h,disp_sqrt,0.3337,0.0041,110
uk13h,disp_pc,0.3525,0.003,110
uk13h,disp_oecdm,0.3298,0.0033,110
uk13h,disp_ae,0.3344,0.0036,110
uk13h,con_hh,NaN,NA,110
uk13h,con_sqrt,NaN,NA,110
uk13h,con_pc,NaN,NA,110
uk13h,con_oecdm,NaN,NA,110
uk13h,con_ae,NaN,NA,110
[1] "Loading dataset uk16h..."
uk16h,market_hh,0.614,0.004,110
uk16h,market_sqrt,0.5471,0.0035,110
uk16h,market_pc,0.5657,0.0044,110
uk16h,market_oecdm,0.5483,0.0038,110
uk16h,market_ae,0.5533,0.0037,110
uk16h,gross_hh,0.4222,0.0037,110
uk16h,gross_sqrt,0.3743,0.0037,110
uk16h,gross_pc,0.389,0.0038,110
uk16h,gross_oecdm,0.3715,0.0038,110
uk16h,gross_ae,0.3747,0.0037,110
uk16h,disp_hh,0.3914,0.0037,110
uk16h,disp_sqrt,0.3428,0.0036,110
uk16h,disp_pc,0.3622,0.004,110
uk16h,disp_oecdm,0.3397,0.0035,110
uk16h,disp_ae,0.3443,0.0036,110
uk16h,con_hh,NaN,NA,110
uk16h,con_sqrt,NaN,NA,110
uk16h,con_pc,NaN,NA,110
uk16h,con_oecdm,NaN,NA,110
uk16h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
262.524   0.964 265.865 


