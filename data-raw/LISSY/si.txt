From: postbox@lisdatacenter.org
Subject: job 510486 si
Date: March 18, 2018 at 3:28:55 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("si") 
[1] "Loading dataset si97h..."
si97h,market_hh,0.4721,0.0083,200
si97h,market_sqrt,0.3671,0.0061,200
si97h,market_pc,0.3801,0.0054,200
si97h,market_oecdm,0.3687,0.0057,200
si97h,market_ae,0.3719,0.0059,200
si97h,gross_hh,0.304,0.0044,200
si97h,gross_sqrt,0.2293,0.004,200
si97h,gross_pc,0.2412,0.0043,200
si97h,gross_oecdm,0.2237,0.0042,200
si97h,gross_ae,0.2265,0.0041,200
si97h,disp_hh,0.304,0.0041,200
si97h,disp_sqrt,0.2293,0.0044,200
si97h,disp_pc,0.2412,0.004,200
si97h,disp_oecdm,0.2237,0.0039,200
si97h,disp_ae,0.2265,0.0045,200
[1] "Loading dataset si99h..."
si99h,market_hh,0.4791,0.0059,200
si99h,market_sqrt,0.373,0.0051,200
si99h,market_pc,0.3861,0.0049,200
si99h,market_oecdm,0.3748,0.0059,200
si99h,market_ae,0.378,0.0056,200
si99h,gross_hh,0.3086,0.0039,200
si99h,gross_sqrt,0.232,0.0031,200
si99h,gross_pc,0.2404,0.0038,200
si99h,gross_oecdm,0.2257,0.0032,200
si99h,gross_ae,0.2276,0.0032,200
si99h,disp_hh,0.3086,0.0047,200
si99h,disp_sqrt,0.232,0.0034,200
si99h,disp_pc,0.2404,0.0038,200
si99h,disp_oecdm,0.2257,0.0035,200
si99h,disp_ae,0.2276,0.0033,200
[1] "Loading dataset si04h..."
si04h,market_hh,0.5099,0.0065,200
si04h,market_sqrt,0.3972,0.0054,200
si04h,market_pc,0.4135,0.0059,200
si04h,market_oecdm,0.3993,0.0058,200
si04h,market_ae,0.4035,0.0059,200
si04h,gross_hh,0.3174,0.0049,200
si04h,gross_sqrt,0.2313,0.0033,200
si04h,gross_pc,0.2413,0.0034,200
si04h,gross_oecdm,0.2269,0.0034,200
si04h,gross_ae,0.2284,0.0035,200
si04h,disp_hh,0.3174,0.0049,200
si04h,disp_sqrt,0.2313,0.0033,200
si04h,disp_pc,0.2413,0.0035,200
si04h,disp_oecdm,0.2269,0.0037,200
si04h,disp_ae,0.2284,0.0034,200
[1] "Loading dataset si07h..."
si07h,market_hh,0.5066,0.006,200
si07h,market_sqrt,0.3962,0.0053,200
si07h,market_pc,0.4129,0.0054,200
si07h,market_oecdm,0.3979,0.0052,200
si07h,market_ae,0.4019,0.0055,200
si07h,gross_hh,0.3187,0.0038,200
si07h,gross_sqrt,0.2301,0.0034,200
si07h,gross_pc,0.2377,0.0037,200
si07h,gross_oecdm,0.2248,0.0035,200
si07h,gross_ae,0.2252,0.0033,200
si07h,disp_hh,0.3187,0.0042,200
si07h,disp_sqrt,0.2301,0.003,200
si07h,disp_pc,0.2377,0.0037,200
si07h,disp_oecdm,0.2248,0.0036,200
si07h,disp_ae,0.2252,0.0034,200
si07h,con_hh,0.2988,0.0043,200
si07h,con_sqrt,0.2434,0.0036,200
si07h,con_pc,0.2747,0.0043,200
si07h,con_oecdm,0.2487,0.0038,200
si07h,con_ae,0.2556,0.0042,200
[1] "Loading dataset si10h..."
si10h,market_hh,0.5325,0.0062,200
si10h,market_sqrt,0.4165,0.005,200
si10h,market_pc,0.4324,0.0056,200
si10h,market_oecdm,0.4179,0.0058,200
si10h,market_ae,0.4216,0.0053,200
si10h,gross_hh,0.3437,0.0049,200
si10h,gross_sqrt,0.2526,0.0037,200
si10h,gross_pc,0.2569,0.0042,200
si10h,gross_oecdm,0.2471,0.0034,200
si10h,gross_ae,0.2463,0.0039,200
si10h,disp_hh,0.3437,0.0045,200
si10h,disp_sqrt,0.2526,0.0035,200
si10h,disp_pc,0.2569,0.004,200
si10h,disp_oecdm,0.2471,0.0037,200
si10h,disp_ae,0.2463,0.0045,200
si10h,con_hh,0.2912,0.0039,200
si10h,con_sqrt,0.2354,0.004,200
si10h,con_pc,0.2692,0.0043,200
si10h,con_oecdm,0.2411,0.004,200
si10h,con_ae,0.2483,0.0039,200
[1] "Loading dataset si12h..."
si12h,market_hh,0.5565,0.0066,200
si12h,market_sqrt,0.4497,0.0051,200
si12h,market_pc,0.4615,0.0062,200
si12h,market_oecdm,0.45,0.0069,200
si12h,market_ae,0.4526,0.006,200
si12h,gross_hh,0.356,0.005,200
si12h,gross_sqrt,0.2705,0.0044,200
si12h,gross_pc,0.2729,0.0053,200
si12h,gross_oecdm,0.2634,0.0039,200
si12h,gross_ae,0.2624,0.0047,200
si12h,disp_hh,0.356,0.0045,200
si12h,disp_sqrt,0.2705,0.0041,200
si12h,disp_pc,0.2729,0.0059,200
si12h,disp_oecdm,0.2634,0.0048,200
si12h,disp_ae,0.2624,0.0043,200
si12h,con_hh,0.2955,0.004,200
si12h,con_sqrt,0.2302,0.0037,200
si12h,con_pc,0.2617,0.0045,200
si12h,con_oecdm,0.2328,0.0037,200
si12h,con_ae,0.2397,0.0045,200
> 
> proc.time()
   user  system elapsed 
 85.184   0.216  87.607 


