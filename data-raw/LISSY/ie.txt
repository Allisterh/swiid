From: postbox@lisdatacenter.org
Subject: job 468818 ie
Date: June 27, 2017 at 3:41:45 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ie") 
[1] "Loading dataset ie87h..."
ie87h,market_hh,0.578,0.0075,100
ie87h,market_sqrt,0.5179,0.0074,100
ie87h,market_pc,0.5468,0.0072,100
ie87h,disp_hh,0.3864,0.0065,100
ie87h,disp_sqrt,0.333,0.0055,100
ie87h,disp_pc,0.3637,0.0061,100
[1] "Loading dataset ie94h..."
ie94h,market_hh,0.5701,0.0112,200
ie94h,market_sqrt,0.5034,0.0097,200
ie94h,market_pc,0.5401,0.0087,200
ie94h,disp_hh,0.3957,0.0071,200
ie94h,disp_sqrt,0.3318,0.007,200
ie94h,disp_pc,0.3632,0.0074,200
[1] "Loading dataset ie95h..."
ie95h,market_hh,0.5629,0.0113,200
ie95h,market_sqrt,0.4929,0.0086,200
ie95h,market_pc,0.5264,0.0104,200
ie95h,disp_hh,0.3973,0.009,200
ie95h,disp_sqrt,0.335,0.0076,200
ie95h,disp_pc,0.362,0.009,200
[1] "Loading dataset ie96h..."
ie96h,market_hh,0.5554,0.0123,200
ie96h,market_sqrt,0.4855,0.0125,200
ie96h,market_pc,0.5163,0.0111,200
ie96h,disp_hh,0.3914,0.0073,200
ie96h,disp_sqrt,0.3245,0.0088,200
ie96h,disp_pc,0.3481,0.008,200
[1] "Loading dataset ie00h..."
ie00h,market_hh,0.5447,0.0134,200
ie00h,market_sqrt,0.4484,0.0142,200
ie00h,market_pc,0.4829,0.016,200
ie00h,disp_hh,0.3976,0.0118,200
ie00h,disp_sqrt,0.3137,0.0094,200
ie00h,disp_pc,0.3319,0.0129,200
[1] "Loading dataset ie04h..."
ie04h,market_hh,0.5717,0.0058,110
ie04h,market_sqrt,0.4962,0.0073,110
ie04h,market_pc,0.5196,0.0066,110
ie04h,disp_hh,0.3827,0.0056,110
ie04h,disp_sqrt,0.3144,0.0066,110
ie04h,disp_pc,0.3273,0.0059,110
[1] "Loading dataset ie07h..."
ie07h,market_hh,0.5703,0.0074,110
ie07h,market_sqrt,0.5026,0.0087,110
ie07h,market_pc,0.5233,0.008,110
ie07h,disp_hh,0.3621,0.0058,110
ie07h,disp_sqrt,0.2957,0.0057,110
ie07h,disp_pc,0.3124,0.005,110
[1] "Loading dataset ie10h..."
ie10h,market_hh,0.622,0.0068,110
ie10h,market_sqrt,0.5693,0.007,110
ie10h,market_pc,0.5894,0.0082,110
ie10h,disp_hh,0.3512,0.0046,110
ie10h,disp_sqrt,0.2961,0.0046,110
ie10h,disp_pc,0.3204,0.0054,110
> 
> proc.time()
   user  system elapsed 
 25.470   0.099  26.926 


