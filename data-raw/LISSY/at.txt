From: <postbox@lisdatacenter.org>
Subject: job 770072 at
Date: October 8, 2020 at 12:50:49 PM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("at") 
[1] "Loading dataset at87h..."
at87h,market_hh,0.3293,0.0026,320
at87h,market_sqrt,0.2273,0.0025,320
at87h,market_pc,0.2305,0.0027,320
at87h,market_oecdm,0.2113,0.0023,320
at87h,market_ae,0.21,0.0027,320
at87h,gross_hh,0.3293,0.0025,320
at87h,gross_sqrt,0.2273,0.0023,320
at87h,gross_pc,0.2305,0.0025,320
at87h,gross_oecdm,0.2113,0.0026,320
at87h,gross_ae,0.21,0.0025,320
at87h,disp_hh,0.3293,0.0027,320
at87h,disp_sqrt,0.2273,0.0025,320
at87h,disp_pc,0.2305,0.0025,320
at87h,disp_oecdm,0.2113,0.0025,320
at87h,disp_ae,0.21,0.0027,320
at87h,con_hh,NaN,NA,320
at87h,con_sqrt,NaN,NA,320
at87h,con_pc,NaN,NA,320
at87h,con_oecdm,NaN,NA,320
at87h,con_ae,NaN,NA,320
[1] "Loading dataset at94h..."
at94h,market_hh,0.5297,0.0091,200
at94h,market_sqrt,0.4434,0.0075,200
at94h,market_pc,0.4803,0.0074,200
at94h,market_oecdm,0.4463,0.009,200
at94h,market_ae,0.4575,0.0084,200
at94h,gross_hh,0.349,0.0061,200
at94h,gross_sqrt,0.2818,0.0063,200
at94h,gross_pc,0.3147,0.0066,200
at94h,gross_oecdm,0.2787,0.0059,200
at94h,gross_ae,0.2879,0.0059,200
at94h,disp_hh,0.349,0.006,200
at94h,disp_sqrt,0.2818,0.0065,200
at94h,disp_pc,0.3147,0.0058,200
at94h,disp_oecdm,0.2787,0.0067,200
at94h,disp_ae,0.2879,0.0057,200
at94h,con_hh,NaN,NA,200
at94h,con_sqrt,NaN,NA,200
at94h,con_pc,NaN,NA,200
at94h,con_oecdm,NaN,NA,200
at94h,con_ae,NaN,NA,200
[1] "Loading dataset at95h..."
at95h,market_hh,0.4349,0.0025,320
at95h,market_sqrt,0.4194,0.003,320
at95h,market_pc,0.4414,0.0033,320
at95h,market_oecdm,0.4131,0.0031,320
at95h,market_ae,0.4199,0.0031,320
at95h,gross_hh,0.3463,0.0021,320
at95h,gross_sqrt,0.2834,0.0019,320
at95h,gross_pc,0.3106,0.0018,320
at95h,gross_oecdm,0.2756,0.0022,320
at95h,gross_ae,0.284,0.0021,320
at95h,disp_hh,0.3463,0.0023,320
at95h,disp_sqrt,0.2834,0.0019,320
at95h,disp_pc,0.3106,0.0018,320
at95h,disp_oecdm,0.2756,0.002,320
at95h,disp_ae,0.284,0.002,320
at95h,con_hh,NaN,NA,320
at95h,con_sqrt,NaN,NA,320
at95h,con_pc,NaN,NA,320
at95h,con_oecdm,NaN,NA,320
at95h,con_ae,NaN,NA,320
[1] "Loading dataset at97h..."
at97h,market_hh,0.5203,0.0076,200
at97h,market_sqrt,0.4307,0.0071,200
at97h,market_pc,0.4664,0.0069,200
at97h,market_oecdm,0.4319,0.0074,200
at97h,market_ae,0.4429,0.0067,200
at97h,gross_hh,0.3276,0.0057,200
at97h,gross_sqrt,0.267,0.0057,200
at97h,gross_pc,0.3027,0.0054,200
at97h,gross_oecdm,0.2639,0.006,200
at97h,gross_ae,0.2741,0.0056,200
at97h,disp_hh,0.3276,0.0055,200
at97h,disp_sqrt,0.267,0.005,200
at97h,disp_pc,0.3027,0.0054,200
at97h,disp_oecdm,0.2639,0.0056,200
at97h,disp_ae,0.2741,0.0056,200
at97h,con_hh,NaN,NA,200
at97h,con_sqrt,NaN,NA,200
at97h,con_pc,NaN,NA,200
at97h,con_oecdm,NaN,NA,200
at97h,con_ae,NaN,NA,200
[1] "Loading dataset at00h..."
at00h,market_hh,0.52,0.0083,200
at00h,market_sqrt,0.4316,0.0092,200
at00h,market_pc,0.4658,0.0084,200
at00h,market_oecdm,0.4326,0.007,200
at00h,market_ae,0.443,0.0084,200
at00h,gross_hh,0.3226,0.0059,200
at00h,gross_sqrt,0.2582,0.0053,200
at00h,gross_pc,0.2896,0.0052,200
at00h,gross_oecdm,0.2541,0.0057,200
at00h,gross_ae,0.2628,0.0065,200
at00h,disp_hh,0.3226,0.0058,200
at00h,disp_sqrt,0.2582,0.0055,200
at00h,disp_pc,0.2896,0.0057,200
at00h,disp_oecdm,0.2541,0.0055,200
at00h,disp_ae,0.2628,0.0058,200
at00h,con_hh,NaN,NA,200
at00h,con_sqrt,NaN,NA,200
at00h,con_pc,NaN,NA,200
at00h,con_oecdm,NaN,NA,200
at00h,con_ae,NaN,NA,200
[1] "Loading dataset at04h..."
at04h,market_hh,0.5448,0.0055,110
at04h,market_sqrt,0.4605,0.0058,110
at04h,market_pc,0.4933,0.0053,110
at04h,market_oecdm,0.4596,0.0052,110
at04h,market_ae,0.4701,0.0053,110
at04h,gross_hh,0.3613,0.0047,110
at04h,gross_sqrt,0.3029,0.0044,110
at04h,gross_pc,0.3322,0.0049,110
at04h,gross_oecdm,0.2972,0.0051,110
at04h,gross_ae,0.3061,0.004,110
at04h,disp_hh,0.332,0.0049,110
at04h,disp_sqrt,0.2686,0.0041,110
at04h,disp_pc,0.2997,0.004,110
at04h,disp_oecdm,0.2612,0.0044,110
at04h,disp_ae,0.2706,0.0041,110
at04h,con_hh,NaN,NA,110
at04h,con_sqrt,NaN,NA,110
at04h,con_pc,NaN,NA,110
at04h,con_oecdm,NaN,NA,110
at04h,con_ae,NaN,NA,110
[1] "Loading dataset at07h..."
at07h,market_hh,0.5728,0.0057,110
at07h,market_sqrt,0.4872,0.0059,110
at07h,market_pc,0.5149,0.0052,110
at07h,market_oecdm,0.4877,0.0056,110
at07h,market_ae,0.4961,0.0049,110
at07h,gross_hh,0.3932,0.0041,110
at07h,gross_sqrt,0.3289,0.0044,110
at07h,gross_pc,0.3483,0.0046,110
at07h,gross_oecdm,0.3236,0.0045,110
at07h,gross_ae,0.3289,0.0043,110
at07h,disp_hh,0.3544,0.0038,110
at07h,disp_sqrt,0.2845,0.0038,110
at07h,disp_pc,0.3061,0.0044,110
at07h,disp_oecdm,0.2765,0.0044,110
at07h,disp_ae,0.2826,0.0045,110
at07h,con_hh,NaN,NA,110
at07h,con_sqrt,NaN,NA,110
at07h,con_pc,NaN,NA,110
at07h,con_oecdm,NaN,NA,110
at07h,con_ae,NaN,NA,110
[1] "Loading dataset at10h..."
at10h,market_hh,0.5783,0.005,110
at10h,market_sqrt,0.494,0.0054,110
at10h,market_pc,0.5212,0.0057,110
at10h,market_oecdm,0.4946,0.005,110
at10h,market_ae,0.5027,0.0056,110
at10h,gross_hh,0.391,0.0044,110
at10h,gross_sqrt,0.3254,0.0044,110
at10h,gross_pc,0.3464,0.0041,110
at10h,gross_oecdm,0.3215,0.0037,110
at10h,gross_ae,0.3271,0.0044,110
at10h,disp_hh,0.353,0.0036,110
at10h,disp_sqrt,0.2798,0.0039,110
at10h,disp_pc,0.3038,0.0044,110
at10h,disp_oecdm,0.2744,0.004,110
at10h,disp_ae,0.2807,0.0034,110
at10h,con_hh,NaN,NA,110
at10h,con_sqrt,NaN,NA,110
at10h,con_pc,NaN,NA,110
at10h,con_oecdm,NaN,NA,110
at10h,con_ae,NaN,NA,110
[1] "Loading dataset at13h..."
at13h,market_hh,0.5838,0.005,110
at13h,market_sqrt,0.4998,0.006,110
at13h,market_pc,0.5312,0.0059,110
at13h,market_oecdm,0.5019,0.0053,110
at13h,market_ae,0.5114,0.0053,110
at13h,gross_hh,0.3873,0.0046,110
at13h,gross_sqrt,0.3231,0.0051,110
at13h,gross_pc,0.3491,0.0049,110
at13h,gross_oecdm,0.3207,0.0051,110
at13h,gross_ae,0.3279,0.0055,110
at13h,disp_hh,0.3508,0.0045,110
at13h,disp_sqrt,0.2804,0.0041,110
at13h,disp_pc,0.3105,0.0041,110
at13h,disp_oecdm,0.2766,0.0046,110
at13h,disp_ae,0.2851,0.0059,110
at13h,con_hh,NaN,NA,110
at13h,con_sqrt,NaN,NA,110
at13h,con_pc,NaN,NA,110
at13h,con_oecdm,NaN,NA,110
at13h,con_ae,NaN,NA,110
[1] "Loading dataset at16h..."
at16h,market_hh,0.5879,0.006,110
at16h,market_sqrt,0.5047,0.0069,110
at16h,market_pc,0.5324,0.0061,110
at16h,market_oecdm,0.5062,0.0066,110
at16h,market_ae,0.5143,0.0063,110
at16h,gross_hh,0.393,0.0052,110
at16h,gross_sqrt,0.3318,0.0056,110
at16h,gross_pc,0.3531,0.0048,110
at16h,gross_oecdm,0.3285,0.0058,110
at16h,gross_ae,0.334,0.0055,110
at16h,disp_hh,0.3517,0.0045,110
at16h,disp_sqrt,0.2852,0.0057,110
at16h,disp_pc,0.3103,0.0063,110
at16h,disp_oecdm,0.2804,0.0053,110
at16h,disp_ae,0.287,0.0055,110
at16h,con_hh,NaN,NA,110
at16h,con_sqrt,NaN,NA,110
at16h,con_pc,NaN,NA,110
at16h,con_oecdm,NaN,NA,110
at16h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
 96.648   0.729  99.846 


