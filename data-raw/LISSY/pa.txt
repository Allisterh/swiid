From: <postbox@lisdatacenter.org>
Subject: job 765613 pa
Date: September 24, 2020 at 10:49:40 PM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("pa") 
[1] "Loading dataset pa07h..."
pa07h,market_hh,0.53,0.004,120
pa07h,market_sqrt,0.5081,0.0039,120
pa07h,market_pc,0.5391,0.004,120
pa07h,market_oecdm,0.5133,0.0044,120
pa07h,market_ae,0.5222,0.0041,120
pa07h,gross_hh,0.5006,0.0035,120
pa07h,gross_sqrt,0.491,0.0037,120
pa07h,gross_pc,0.5258,0.0038,120
pa07h,gross_oecdm,0.4962,0.0041,120
pa07h,gross_ae,0.5063,0.0033,120
pa07h,disp_hh,0.4868,0.0037,120
pa07h,disp_sqrt,0.4771,0.0038,120
pa07h,disp_pc,0.5129,0.0034,120
pa07h,disp_oecdm,0.482,0.0037,120
pa07h,disp_ae,0.4925,0.0042,120
pa07h,con_hh,NaN,NA,120
pa07h,con_sqrt,NaN,NA,120
pa07h,con_pc,NaN,NA,120
pa07h,con_oecdm,NaN,NA,120
pa07h,con_ae,NaN,NA,120
[1] "Loading dataset pa10h..."
pa10h,market_hh,0.5307,0.0037,120
pa10h,market_sqrt,0.5052,0.004,120
pa10h,market_pc,0.5366,0.0042,120
pa10h,market_oecdm,0.5092,0.0042,120
pa10h,market_ae,0.5185,0.0037,120
pa10h,gross_hh,0.4889,0.003,120
pa10h,gross_sqrt,0.476,0.0042,120
pa10h,gross_pc,0.5105,0.0037,120
pa10h,gross_oecdm,0.4796,0.0039,120
pa10h,gross_ae,0.49,0.004,120
pa10h,disp_hh,0.4785,0.0035,120
pa10h,disp_sqrt,0.4656,0.0039,120
pa10h,disp_pc,0.5012,0.0039,120
pa10h,disp_oecdm,0.4689,0.0039,120
pa10h,disp_ae,0.4798,0.004,120
pa10h,con_hh,NaN,NA,120
pa10h,con_sqrt,NaN,NA,120
pa10h,con_pc,NaN,NA,120
pa10h,con_oecdm,NaN,NA,120
pa10h,con_ae,NaN,NA,120
[1] "Loading dataset pa13h..."
pa13h,market_hh,0.5305,0.0052,120
pa13h,market_sqrt,0.5105,0.005,120
pa13h,market_pc,0.5423,0.0054,120
pa13h,market_oecdm,0.5167,0.0057,120
pa13h,market_ae,0.5257,0.0057,120
pa13h,gross_hh,0.4881,0.0041,120
pa13h,gross_sqrt,0.4765,0.0048,120
pa13h,gross_pc,0.5114,0.0053,120
pa13h,gross_oecdm,0.4822,0.0052,120
pa13h,gross_ae,0.4923,0.0049,120
pa13h,disp_hh,0.4744,0.0039,120
pa13h,disp_sqrt,0.4622,0.0053,120
pa13h,disp_pc,0.4986,0.0048,120
pa13h,disp_oecdm,0.4677,0.005,120
pa13h,disp_ae,0.4783,0.0052,120
pa13h,con_hh,NaN,NA,120
pa13h,con_sqrt,NaN,NA,120
pa13h,con_pc,NaN,NA,120
pa13h,con_oecdm,NaN,NA,120
pa13h,con_ae,NaN,NA,120
[1] "Loading dataset pa16h..."
pa16h,market_hh,0.5336,0.0046,120
pa16h,market_sqrt,0.5131,0.0045,120
pa16h,market_pc,0.5428,0.0049,120
pa16h,market_oecdm,0.5201,0.0052,120
pa16h,market_ae,0.5281,0.0046,120
pa16h,gross_hh,0.4836,0.0042,120
pa16h,gross_sqrt,0.4719,0.0039,120
pa16h,gross_pc,0.5048,0.0049,120
pa16h,gross_oecdm,0.4787,0.0043,120
pa16h,gross_ae,0.4877,0.0046,120
pa16h,disp_hh,0.4682,0.0038,120
pa16h,disp_sqrt,0.4562,0.0046,120
pa16h,disp_pc,0.4904,0.0042,120
pa16h,disp_oecdm,0.4626,0.0042,120
pa16h,disp_ae,0.4722,0.0039,120
pa16h,con_hh,NaN,NA,120
pa16h,con_sqrt,NaN,NA,120
pa16h,con_pc,NaN,NA,120
pa16h,con_oecdm,NaN,NA,120
pa16h,con_ae,NaN,NA,120
> 
> proc.time()
   user  system elapsed 
 64.663   0.418 106.487 


