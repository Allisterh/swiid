From: <postbox@lisdatacenter.org>
Subject: job 765531 fr
Date: September 24, 2020 at 9:06:57 PM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("fr") 
[1] "Loading dataset fr78h..."
fr78h,market_hh,0.5129,0.0042,320
fr78h,market_sqrt,0.448,0.004,320
fr78h,market_pc,0.484,0.0042,320
fr78h,market_oecdm,0.4543,0.0039,320
fr78h,market_ae,0.4639,0.0046,320
fr78h,gross_hh,0.3735,0.0035,320
fr78h,gross_sqrt,0.3251,0.0031,320
fr78h,gross_pc,0.3596,0.0036,320
fr78h,gross_oecdm,0.3294,0.0031,320
fr78h,gross_ae,0.3379,0.0031,320
fr78h,disp_hh,0.3648,0.0034,320
fr78h,disp_sqrt,0.3126,0.0035,320
fr78h,disp_pc,0.3462,0.0033,320
fr78h,disp_oecdm,0.3164,0.0036,320
fr78h,disp_ae,0.3245,0.0035,320
fr78h,con_hh,0.3547,0.0026,320
fr78h,con_sqrt,0.2963,0.0025,320
fr78h,con_pc,0.3269,0.0025,320
fr78h,con_oecdm,0.2993,0.0023,320
fr78h,con_ae,0.3065,0.0022,320
[1] "Loading dataset fr84h..."
fr84h,market_hh,0.5656,0.0041,320
fr84h,market_sqrt,0.5049,0.0043,320
fr84h,market_pc,0.534,0.004,320
fr84h,market_oecdm,0.5038,0.0038,320
fr84h,market_ae,0.5105,0.0043,320
fr84h,gross_hh,0.3917,0.0042,320
fr84h,gross_sqrt,0.348,0.0037,320
fr84h,gross_pc,0.3812,0.0036,320
fr84h,gross_oecdm,0.35,0.0039,320
fr84h,gross_ae,0.356,0.0042,320
fr84h,disp_hh,0.3845,0.0039,320
fr84h,disp_sqrt,0.3362,0.0046,320
fr84h,disp_pc,0.3682,0.004,320
fr84h,disp_oecdm,0.3383,0.0041,320
fr84h,disp_ae,0.3436,0.0043,320
fr84h,con_hh,0.3418,0.0026,320
fr84h,con_sqrt,0.2895,0.0022,320
fr84h,con_pc,0.3225,0.0022,320
fr84h,con_oecdm,0.2899,0.0021,320
fr84h,con_ae,0.296,0.0023,320
[1] "Loading dataset fr89h..."
fr89h,market_hh,0.551,0.0047,320
fr89h,market_sqrt,0.4798,0.0043,320
fr89h,market_pc,0.5099,0.0043,320
fr89h,market_oecdm,0.4831,0.0044,320
fr89h,market_ae,0.4913,0.0045,320
fr89h,gross_hh,0.3622,0.0038,320
fr89h,gross_sqrt,0.311,0.0038,320
fr89h,gross_pc,0.3461,0.0032,320
fr89h,gross_oecdm,0.3132,0.0032,320
fr89h,gross_ae,0.3219,0.0033,320
fr89h,disp_hh,0.348,0.0037,320
fr89h,disp_sqrt,0.2915,0.0036,320
fr89h,disp_pc,0.3263,0.0034,320
fr89h,disp_oecdm,0.2933,0.0033,320
fr89h,disp_ae,0.3016,0.0028,320
fr89h,con_hh,0.3644,0.0033,320
fr89h,con_sqrt,0.3129,0.0029,320
fr89h,con_pc,0.3444,0.003,320
fr89h,con_oecdm,0.3158,0.0036,320
fr89h,con_ae,0.3233,0.003,320
[1] "Loading dataset fr94h..."
fr94h,market_hh,0.5596,0.0039,320
fr94h,market_sqrt,0.4868,0.0034,320
fr94h,market_pc,0.5117,0.0037,320
fr94h,market_oecdm,0.4878,0.004,320
fr94h,market_ae,0.4943,0.0039,320
fr94h,gross_hh,0.3544,0.0031,320
fr94h,gross_sqrt,0.3055,0.0029,320
fr94h,gross_pc,0.3392,0.0035,320
fr94h,gross_oecdm,0.3074,0.0028,320
fr94h,gross_ae,0.3157,0.0031,320
fr94h,disp_hh,0.3413,0.0028,320
fr94h,disp_sqrt,0.2881,0.003,320
fr94h,disp_pc,0.3217,0.0031,320
fr94h,disp_oecdm,0.2896,0.003,320
fr94h,disp_ae,0.2977,0.0032,320
fr94h,con_hh,0.3444,0.0029,320
fr94h,con_sqrt,0.2895,0.0024,320
fr94h,con_pc,0.3193,0.0033,320
fr94h,con_oecdm,0.2904,0.0025,320
fr94h,con_ae,0.2973,0.0029,320
[1] "Loading dataset fr00h..."
fr00h,market_hh,0.5518,0.0039,320
fr00h,market_sqrt,0.4818,0.0037,320
fr00h,market_pc,0.5059,0.0041,320
fr00h,market_oecdm,0.483,0.0039,320
fr00h,market_ae,0.4894,0.0038,320
fr00h,gross_hh,0.3456,0.0033,320
fr00h,gross_sqrt,0.2986,0.0033,320
fr00h,gross_pc,0.3323,0.0029,320
fr00h,gross_oecdm,0.2989,0.0027,320
fr00h,gross_ae,0.3074,0.0029,320
fr00h,disp_hh,0.3294,0.0028,320
fr00h,disp_sqrt,0.2778,0.0025,320
fr00h,disp_pc,0.3114,0.003,320
fr00h,disp_oecdm,0.2778,0.0026,320
fr00h,disp_ae,0.286,0.0026,320
fr00h,con_hh,0.4333,0.0043,320
fr00h,con_sqrt,0.381,0.0045,320
fr00h,con_pc,0.398,0.004,320
fr00h,con_oecdm,0.3817,0.0043,320
fr00h,con_ae,0.3848,0.0045,320
[1] "Loading dataset fr05h..."
fr05h,market_hh,0.5549,0.0033,320
fr05h,market_sqrt,0.479,0.0035,320
fr05h,market_pc,0.5028,0.004,320
fr05h,market_oecdm,0.4798,0.0036,320
fr05h,market_ae,0.4861,0.0038,320
fr05h,gross_hh,0.3402,0.0028,320
fr05h,gross_sqrt,0.2941,0.0023,320
fr05h,gross_pc,0.3305,0.0027,320
fr05h,gross_oecdm,0.2944,0.0026,320
fr05h,gross_ae,0.3039,0.0027,320
fr05h,disp_hh,0.3289,0.0027,320
fr05h,disp_sqrt,0.279,0.0028,320
fr05h,disp_pc,0.3155,0.0029,320
fr05h,disp_oecdm,0.2789,0.0031,320
fr05h,disp_ae,0.2882,0.0028,320
fr05h,con_hh,0.3785,0.0028,320
fr05h,con_sqrt,0.3276,0.0027,320
fr05h,con_pc,0.3569,0.0028,320
fr05h,con_oecdm,0.3287,0.003,320
fr05h,con_ae,0.3356,0.0024,320
[1] "Loading dataset fr10h..."
fr10h,market_hh,0.5681,0.0035,320
fr10h,market_sqrt,0.4968,0.0042,320
fr10h,market_pc,0.5174,0.0039,320
fr10h,market_oecdm,0.4973,0.0044,320
fr10h,market_ae,0.5024,0.0045,320
fr10h,gross_hh,0.3534,0.0036,320
fr10h,gross_sqrt,0.3066,0.0037,320
fr10h,gross_pc,0.3377,0.0032,320
fr10h,gross_oecdm,0.3064,0.0037,320
fr10h,gross_ae,0.3136,0.0034,320
fr10h,disp_hh,0.34,0.0028,320
fr10h,disp_sqrt,0.2891,0.0035,320
fr10h,disp_pc,0.3203,0.0029,320
fr10h,disp_oecdm,0.2889,0.0031,320
fr10h,disp_ae,0.2958,0.0037,320
fr10h,con_hh,0.3353,0.0023,320
fr10h,con_sqrt,0.2896,0.0027,320
fr10h,con_pc,0.3221,0.0025,320
fr10h,con_oecdm,0.2905,0.0025,320
fr10h,con_ae,0.2978,0.0021,320
> 
> proc.time()
   user  system elapsed 
 87.165   0.596  89.531 


