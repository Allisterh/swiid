From: <postbox@lisdatacenter.org>
Subject: job 765631 za
Date: September 24, 2020 at 11:49:04 PM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("za") 
[1] "Loading dataset za08h..."
za08h,market_hh,0.6675,0.0047,120
za08h,market_sqrt,0.6917,0.0046,120
za08h,market_pc,0.7253,0.0053,120
za08h,market_oecdm,0.7035,0.0051,120
za08h,market_ae,0.7118,0.0048,120
za08h,gross_hh,0.599,0.0044,120
za08h,gross_sqrt,0.6108,0.005,120
za08h,gross_pc,0.6591,0.005,120
za08h,gross_oecdm,0.6264,0.0045,120
za08h,gross_ae,0.639,0.0044,120
za08h,disp_hh,0.5919,0.0041,120
za08h,disp_sqrt,0.6026,0.0045,120
za08h,disp_pc,0.6515,0.0047,120
za08h,disp_oecdm,0.618,0.0043,120
za08h,disp_ae,0.6308,0.0046,120
za08h,con_hh,0.6054,0.0055,120
za08h,con_sqrt,0.6153,0.0057,120
za08h,con_pc,0.6575,0.0053,120
za08h,con_oecdm,0.6288,0.0053,120
za08h,con_ae,0.6396,0.0055,120
[1] "Loading dataset za10h..."
za10h,market_hh,0.6625,0.0057,120
za10h,market_sqrt,0.687,0.0061,120
za10h,market_pc,0.7256,0.0078,120
za10h,market_oecdm,0.7006,0.0066,120
za10h,market_ae,0.7101,0.0067,120
za10h,gross_hh,0.5911,0.0062,120
za10h,gross_sqrt,0.5999,0.0067,120
za10h,gross_pc,0.6543,0.0075,120
za10h,gross_oecdm,0.6183,0.0058,120
za10h,gross_ae,0.6321,0.0062,120
za10h,disp_hh,0.5821,0.0074,120
za10h,disp_sqrt,0.5898,0.0065,120
za10h,disp_pc,0.6459,0.0089,120
za10h,disp_oecdm,0.6083,0.0076,120
za10h,disp_ae,0.6226,0.0071,120
za10h,con_hh,0.6243,0.0086,120
za10h,con_sqrt,0.635,0.0089,120
za10h,con_pc,0.6792,0.0092,120
za10h,con_oecdm,0.6503,0.0075,120
za10h,con_ae,0.6612,0.0082,120
[1] "Loading dataset za12h..."
za12h,market_hh,0.6561,0.0051,120
za12h,market_sqrt,0.6746,0.0061,120
za12h,market_pc,0.7124,0.008,120
za12h,market_oecdm,0.6868,0.006,120
za12h,market_ae,0.6963,0.0066,120
za12h,gross_hh,0.5908,0.0049,120
za12h,gross_sqrt,0.5934,0.0052,120
za12h,gross_pc,0.6445,0.0081,120
za12h,gross_oecdm,0.6091,0.0059,120
za12h,gross_ae,0.6224,0.0067,120
za12h,disp_hh,0.58,0.0062,120
za12h,disp_sqrt,0.5815,0.0065,120
za12h,disp_pc,0.6342,0.0088,120
za12h,disp_oecdm,0.5975,0.0072,120
za12h,disp_ae,0.6112,0.0078,120
za12h,con_hh,0.5895,0.008,120
za12h,con_sqrt,0.6064,0.0096,120
za12h,con_pc,0.662,0.0098,120
za12h,con_oecdm,0.624,0.0087,120
za12h,con_ae,0.6386,0.0096,120
[1] "Loading dataset za15h..."
za15h,market_hh,0.6432,0.0048,120
za15h,market_sqrt,0.6606,0.0054,120
za15h,market_pc,0.7016,0.0063,120
za15h,market_oecdm,0.6721,0.0053,120
za15h,market_ae,0.6827,0.0054,120
za15h,gross_hh,0.5844,0.0046,120
za15h,gross_sqrt,0.5862,0.0051,120
za15h,gross_pc,0.6398,0.0065,120
za15h,gross_oecdm,0.6008,0.0051,120
za15h,gross_ae,0.6151,0.0055,120
za15h,disp_hh,0.5706,0.0055,120
za15h,disp_sqrt,0.5712,0.006,120
za15h,disp_pc,0.6264,0.0067,120
za15h,disp_oecdm,0.5858,0.0055,120
za15h,disp_ae,0.6007,0.0061,120
za15h,con_hh,0.5915,0.0108,120
za15h,con_sqrt,0.5965,0.0081,120
za15h,con_pc,0.6548,0.0132,120
za15h,con_oecdm,0.6132,0.0096,120
za15h,con_ae,0.6288,0.0101,120
[1] "Loading dataset za17h..."
za17h,market_hh,0.6415,0.0039,120
za17h,market_sqrt,0.6607,0.0042,120
za17h,market_pc,0.7041,0.0051,120
za17h,market_oecdm,0.6726,0.0046,120
za17h,market_ae,0.6841,0.0048,120
za17h,gross_hh,0.5897,0.0037,120
za17h,gross_sqrt,0.5924,0.0043,120
za17h,gross_pc,0.648,0.0051,120
za17h,gross_oecdm,0.6069,0.0043,120
za17h,gross_ae,0.622,0.0039,120
za17h,disp_hh,0.5763,0.0035,120
za17h,disp_sqrt,0.5775,0.0044,120
za17h,disp_pc,0.6348,0.0054,120
za17h,disp_oecdm,0.5922,0.004,120
za17h,disp_ae,0.6078,0.0048,120
za17h,con_hh,0.5931,0.0048,120
za17h,con_sqrt,0.6006,0.0041,120
za17h,con_pc,0.6506,0.0045,120
za17h,con_oecdm,0.616,0.0044,120
za17h,con_ae,0.629,0.0055,120
> 
> proc.time()
   user  system elapsed 
 51.415   0.479  52.457 


