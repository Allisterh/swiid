From: postbox@lisdatacenter.org
Subject: job 671116 ee
Date: October 30, 2019 at 10:22:50 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ee") 
[1] "Loading dataset ee00h..."
ee00h,market_hh,0.5591,0.0052,200
ee00h,market_sqrt,0.4868,0.0051,200
ee00h,market_pc,0.499,0.0059,200
ee00h,market_oecdm,0.4879,0.0057,200
ee00h,market_ae,0.4906,0.0059,200
ee00h,gross_hh,0.4203,0.0045,200
ee00h,gross_sqrt,0.3598,0.0046,200
ee00h,gross_pc,0.3621,0.0052,200
ee00h,gross_oecdm,0.358,0.0049,200
ee00h,gross_ae,0.3565,0.0051,200
ee00h,disp_hh,0.4203,0.0044,200
ee00h,disp_sqrt,0.3598,0.005,200
ee00h,disp_pc,0.3621,0.0053,200
ee00h,disp_oecdm,0.358,0.0052,200
ee00h,disp_ae,0.3565,0.0049,200
ee00h,con_hh,0.4175,0.0045,200
ee00h,con_sqrt,0.3563,0.0052,200
ee00h,con_pc,0.3605,0.0055,200
ee00h,con_oecdm,0.3551,0.005,200
ee00h,con_ae,0.3542,0.0046,200
[1] "Loading dataset ee04h..."
ee04h,market_hh,0.5813,0.0068,100
ee04h,market_sqrt,0.4967,0.0058,100
ee04h,market_pc,0.5077,0.0062,100
ee04h,market_oecdm,0.4963,0.0062,100
ee04h,market_ae,0.4988,0.0065,100
ee04h,gross_hh,0.4497,0.0059,100
ee04h,gross_sqrt,0.3774,0.0057,100
ee04h,gross_pc,0.3714,0.0062,100
ee04h,gross_oecdm,0.3719,0.0055,100
ee04h,gross_ae,0.3686,0.0069,100
ee04h,disp_hh,0.4201,0.006,100
ee04h,disp_sqrt,0.3481,0.0064,100
ee04h,disp_pc,0.3433,0.0058,100
ee04h,disp_oecdm,0.3421,0.005,100
ee04h,disp_ae,0.3389,0.0062,100
ee04h,con_hh,NaN,NA,100
ee04h,con_sqrt,NaN,NA,100
ee04h,con_pc,NaN,NA,100
ee04h,con_oecdm,NaN,NA,100
ee04h,con_ae,NaN,NA,100
[1] "Loading dataset ee07h..."
ee07h,market_hh,0.5386,0.0066,120
ee07h,market_sqrt,0.4461,0.0059,120
ee07h,market_pc,0.4635,0.0063,120
ee07h,market_oecdm,0.4471,0.0051,120
ee07h,market_ae,0.4513,0.0059,120
ee07h,gross_hh,0.421,0.0048,120
ee07h,gross_sqrt,0.3372,0.0044,120
ee07h,gross_pc,0.3358,0.0057,120
ee07h,gross_oecdm,0.334,0.0041,120
ee07h,gross_ae,0.3315,0.0048,120
ee07h,disp_hh,0.3962,0.0053,120
ee07h,disp_sqrt,0.3117,0.004,120
ee07h,disp_pc,0.3109,0.0052,120
ee07h,disp_oecdm,0.308,0.0049,120
ee07h,disp_ae,0.3055,0.0054,120
ee07h,con_hh,NaN,NA,120
ee07h,con_sqrt,NaN,NA,120
ee07h,con_pc,NaN,NA,120
ee07h,con_oecdm,NaN,NA,120
ee07h,con_ae,NaN,NA,120
[1] "Loading dataset ee10h..."
ee10h,market_hh,0.5699,0.0061,120
ee10h,market_sqrt,0.4856,0.0061,120
ee10h,market_pc,0.5022,0.0063,120
ee10h,market_oecdm,0.4885,0.0063,120
ee10h,market_ae,0.4921,0.0068,120
ee10h,gross_hh,0.4211,0.005,120
ee10h,gross_sqrt,0.3469,0.005,120
ee10h,gross_pc,0.3466,0.0055,120
ee10h,gross_oecdm,0.3462,0.0049,120
ee10h,gross_ae,0.3433,0.0049,120
ee10h,disp_hh,0.3948,0.0039,120
ee10h,disp_sqrt,0.32,0.005,120
ee10h,disp_pc,0.3217,0.0052,120
ee10h,disp_oecdm,0.3189,0.0054,120
ee10h,disp_ae,0.3163,0.0051,120
ee10h,con_hh,NaN,NA,120
ee10h,con_sqrt,NaN,NA,120
ee10h,con_pc,NaN,NA,120
ee10h,con_oecdm,NaN,NA,120
ee10h,con_ae,NaN,NA,120
[1] "Loading dataset ee13h..."
ee13h,market_hh,0.5936,0.0057,120
ee13h,market_sqrt,0.5064,0.0053,120
ee13h,market_pc,0.5236,0.0056,120
ee13h,market_oecdm,0.5074,0.0053,120
ee13h,market_ae,0.5115,0.0055,120
ee13h,gross_hh,0.4528,0.0047,120
ee13h,gross_sqrt,0.3774,0.0049,120
ee13h,gross_pc,0.3743,0.0045,120
ee13h,gross_oecdm,0.3741,0.0047,120
ee13h,gross_ae,0.371,0.0042,120
ee13h,disp_hh,0.4286,0.0046,120
ee13h,disp_sqrt,0.3533,0.0047,120
ee13h,disp_pc,0.3503,0.0053,120
ee13h,disp_oecdm,0.3494,0.0044,120
ee13h,disp_ae,0.3461,0.0045,120
ee13h,con_hh,NaN,NA,120
ee13h,con_sqrt,NaN,NA,120
ee13h,con_pc,NaN,NA,120
ee13h,con_oecdm,NaN,NA,120
ee13h,con_ae,NaN,NA,120
> 
> proc.time()
   user  system elapsed 
 41.175   0.288  42.604 


