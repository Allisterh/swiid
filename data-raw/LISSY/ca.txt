From: postbox@lisdatacenter.org
Subject: job 571959 ca
Date: November 9, 2018 at 11:21:40 AM CST
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ca") 
[1] "Loading dataset ca71h..."
ca71h,market_hh,0.4823,0.0029,100
ca71h,market_sqrt,0.4108,0.0024,100
ca71h,market_pc,0.4614,0.0023,100
ca71h,gross_hh,0.4168,0.0024,100
ca71h,gross_sqrt,0.3534,0.0022,100
ca71h,gross_pc,0.4009,0.0021,100
ca71h,disp_hh,0.3918,0.0022,100
ca71h,disp_sqrt,0.3238,0.0018,100
ca71h,disp_pc,0.3745,0.0019,100
[1] "Loading dataset ca75h..."
ca75h,market_hh,0.4601,0.0024,100
ca75h,market_sqrt,0.3904,0.002,100
ca75h,market_pc,0.4316,0.0022,100
ca75h,gross_hh,0.3879,0.0019,100
ca75h,gross_sqrt,0.3221,0.002,100
ca75h,gross_pc,0.3587,0.0022,100
ca75h,disp_hh,0.3614,0.002,100
ca75h,disp_sqrt,0.294,0.0018,100
ca75h,disp_pc,0.335,0.0016,100
[1] "Loading dataset ca81h..."
ca81h,market_hh,0.4467,0.0039,100
ca81h,market_sqrt,0.3845,0.0035,100
ca81h,market_pc,0.4237,0.0034,100
ca81h,gross_hh,0.3707,0.0028,100
ca81h,gross_sqrt,0.3153,0.0027,100
ca81h,gross_pc,0.3516,0.0027,100
ca81h,disp_hh,0.3441,0.0026,100
ca81h,disp_sqrt,0.2867,0.0022,100
ca81h,disp_pc,0.326,0.0026,100
[1] "Loading dataset ca87h..."
ca87h,market_hh,0.467,0.0049,100
ca87h,market_sqrt,0.4081,0.0047,100
ca87h,market_pc,0.4389,0.0048,100
ca87h,market_oecdm,0.4063,0.0047,100
ca87h,market_ae,0.4147,0.005,100
ca87h,gross_hh,0.3655,0.0041,100
ca87h,gross_sqrt,0.3184,0.0037,100
ca87h,gross_pc,0.3468,0.004,100
ca87h,gross_oecdm,0.3142,0.0039,100
ca87h,gross_ae,0.3213,0.0035,100
ca87h,disp_hh,0.333,0.0035,100
ca87h,disp_sqrt,0.2841,0.003,100
ca87h,disp_pc,0.316,0.0037,100
ca87h,disp_oecdm,0.2789,0.0042,100
ca87h,disp_ae,0.287,0.0034,100
[1] "Loading dataset ca91h..."
ca91h,market_hh,0.4923,0.0039,100
ca91h,market_sqrt,0.4273,0.004,100
ca91h,market_pc,0.4542,0.0035,100
ca91h,market_oecdm,0.4262,0.0039,100
ca91h,market_ae,0.4329,0.004,100
ca91h,gross_hh,0.3735,0.0038,100
ca91h,gross_sqrt,0.3211,0.0034,100
ca91h,gross_pc,0.3461,0.0031,100
ca91h,gross_oecdm,0.3161,0.0036,100
ca91h,gross_ae,0.3217,0.0034,100
ca91h,disp_hh,0.3373,0.0027,100
ca91h,disp_sqrt,0.2822,0.003,100
ca91h,disp_pc,0.311,0.0028,100
ca91h,disp_oecdm,0.2754,0.0027,100
ca91h,disp_ae,0.2822,0.0028,100
[1] "Loading dataset ca94h..."
ca94h,market_hh,0.5171,0.0022,100
ca94h,market_sqrt,0.4506,0.0022,100
ca94h,market_pc,0.4783,0.002,100
ca94h,market_oecdm,0.4513,0.0022,100
ca94h,market_ae,0.4594,0.0022,100
ca94h,gross_hh,0.3781,0.0017,100
ca94h,gross_sqrt,0.3267,0.002,100
ca94h,gross_pc,0.3508,0.0018,100
ca94h,gross_oecdm,0.3234,0.0017,100
ca94h,gross_ae,0.3301,0.0019,100
ca94h,disp_hh,0.3399,0.0015,100
ca94h,disp_sqrt,0.2856,0.0016,100
ca94h,disp_pc,0.3137,0.0019,100
ca94h,disp_oecdm,0.281,0.0016,100
ca94h,disp_ae,0.2889,0.0015,100
[1] "Loading dataset ca97h..."
ca97h,market_hh,0.5229,0.0024,100
ca97h,market_sqrt,0.4519,0.0025,100
ca97h,market_pc,0.4775,0.0027,100
ca97h,market_oecdm,0.4523,0.0022,100
ca97h,market_ae,0.4596,0.0026,100
ca97h,gross_hh,0.3858,0.002,100
ca97h,gross_sqrt,0.3325,0.002,100
ca97h,gross_pc,0.354,0.0018,100
ca97h,gross_oecdm,0.3291,0.0021,100
ca97h,gross_ae,0.3349,0.0024,100
ca97h,disp_hh,0.3481,0.0018,100
ca97h,disp_sqrt,0.2921,0.002,100
ca97h,disp_pc,0.3171,0.0019,100
ca97h,disp_oecdm,0.2872,0.0017,100
ca97h,disp_ae,0.2941,0.0018,100
[1] "Loading dataset ca98h..."
ca98h,market_hh,0.5522,0.0033,100
ca98h,market_sqrt,0.4781,0.0034,100
ca98h,market_pc,0.4985,0.0035,100
ca98h,gross_hh,0.408,0.0028,100
ca98h,gross_sqrt,0.3513,0.0026,100
ca98h,gross_pc,0.3694,0.003,100
ca98h,disp_hh,0.3728,0.003,100
ca98h,disp_sqrt,0.3127,0.0031,100
ca98h,disp_pc,0.3335,0.0032,100
[1] "Loading dataset ca00h..."
ca00h,market_hh,0.5386,0.0026,100
ca00h,market_sqrt,0.4644,0.0035,100
ca00h,market_pc,0.4825,0.0029,100
ca00h,market_oecdm,0.4638,0.0033,100
ca00h,market_ae,0.4687,0.0035,100
ca00h,gross_hh,0.4056,0.0029,100
ca00h,gross_sqrt,0.3494,0.0029,100
ca00h,gross_pc,0.3649,0.0026,100
ca00h,gross_oecdm,0.3455,0.0026,100
ca00h,gross_ae,0.3494,0.0027,100
ca00h,disp_hh,0.3726,0.0029,100
ca00h,disp_sqrt,0.3147,0.0035,100
ca00h,disp_pc,0.3328,0.003,100
ca00h,disp_oecdm,0.3093,0.0034,100
ca00h,disp_ae,0.314,0.0029,100
[1] "Loading dataset ca04h..."
ca04h,market_hh,0.5478,0.0028,100
ca04h,market_sqrt,0.4752,0.0032,100
ca04h,market_pc,0.4935,0.0033,100
ca04h,market_oecdm,0.4757,0.0036,100
ca04h,market_ae,0.4804,0.0033,100
ca04h,gross_hh,0.4071,0.003,100
ca04h,gross_sqrt,0.3529,0.003,100
ca04h,gross_pc,0.3695,0.0028,100
ca04h,gross_oecdm,0.3506,0.0029,100
ca04h,gross_ae,0.3545,0.0031,100
ca04h,disp_hh,0.3748,0.0026,100
ca04h,disp_sqrt,0.318,0.0029,100
ca04h,disp_pc,0.3367,0.0028,100
ca04h,disp_oecdm,0.3145,0.003,100
ca04h,disp_ae,0.3191,0.0031,100
[1] "Loading dataset ca07h..."
ca07h,market_hh,0.5422,0.0032,110
ca07h,market_sqrt,0.4713,0.0033,110
ca07h,market_pc,0.4918,0.0033,110
ca07h,market_oecdm,0.4716,0.0037,110
ca07h,market_ae,0.4772,0.0032,110
ca07h,gross_hh,0.4069,0.0026,110
ca07h,gross_sqrt,0.3506,0.0029,110
ca07h,gross_pc,0.3693,0.0029,110
ca07h,gross_oecdm,0.3482,0.003,110
ca07h,gross_ae,0.353,0.0028,110
ca07h,disp_hh,0.3741,0.0027,110
ca07h,disp_sqrt,0.314,0.0026,110
ca07h,disp_pc,0.3352,0.003,110
ca07h,disp_oecdm,0.3107,0.0024,110
ca07h,disp_ae,0.3162,0.0028,110
[1] "Loading dataset ca10h..."
ca10h,market_hh,0.5528,0.0034,110
ca10h,market_sqrt,0.4812,0.0035,110
ca10h,market_pc,0.5001,0.0037,110
ca10h,market_oecdm,0.481,0.0034,110
ca10h,market_ae,0.4862,0.0033,110
ca10h,gross_hh,0.4081,0.0033,110
ca10h,gross_sqrt,0.3515,0.0033,110
ca10h,gross_pc,0.3677,0.0027,110
ca10h,gross_oecdm,0.3484,0.0033,110
ca10h,gross_ae,0.3524,0.0029,110
ca10h,disp_hh,0.376,0.0033,110
ca10h,disp_sqrt,0.316,0.0033,110
ca10h,disp_pc,0.3347,0.0032,110
ca10h,disp_oecdm,0.312,0.0031,110
ca10h,disp_ae,0.3168,0.0035,110
[1] "Loading dataset ca13h..."
ca13h,market_hh,0.5552,0.0034,110
ca13h,market_sqrt,0.4806,0.0038,110
ca13h,market_pc,0.4986,0.0037,110
ca13h,gross_hh,0.4126,0.0026,110
ca13h,gross_sqrt,0.356,0.0032,110
ca13h,gross_pc,0.3713,0.0033,110
ca13h,disp_hh,0.3813,0.003,110
ca13h,disp_sqrt,0.3214,0.003,110
ca13h,disp_pc,0.3387,0.0032,110
> 
> proc.time()
    user   system  elapsed 
 874.252    1.249 3334.663 


