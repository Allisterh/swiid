From: postbox@lisdatacenter.org
Subject: job 468857 tw
Date: June 27, 2017 at 5:05:06 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("tw") 
[1] "Loading dataset tw81h..."
tw81h,market_hh,0.2904,0.0022,100
tw81h,market_sqrt,0.2719,0.0021,100
tw81h,market_pc,0.304,0.0022,100
tw81h,disp_hh,0.2853,0.0019,100
tw81h,disp_sqrt,0.2672,0.0022,100
tw81h,disp_pc,0.2996,0.0021,100
tw81h,con_hh,0.2515,0.0019,100
tw81h,con_sqrt,0.2246,0.0017,100
tw81h,con_pc,0.2577,0.0018,100
[1] "Loading dataset tw86h..."
tw86h,market_hh,0.3055,0.0023,100
tw86h,market_sqrt,0.2748,0.0018,100
tw86h,market_pc,0.3009,0.0023,100
tw86h,disp_hh,0.2983,0.0019,100
tw86h,disp_sqrt,0.2683,0.0023,100
tw86h,disp_pc,0.2949,0.0018,100
tw86h,con_hh,0.2661,0.0019,100
tw86h,con_sqrt,0.2286,0.0021,100
tw86h,con_pc,0.2571,0.0019,100
[1] "Loading dataset tw91h..."
tw91h,market_hh,0.3151,0.002,100
tw91h,market_sqrt,0.281,0.002,100
tw91h,market_pc,0.3061,0.0022,100
tw91h,disp_hh,0.3033,0.0019,100
tw91h,disp_sqrt,0.2711,0.0023,100
tw91h,disp_pc,0.2974,0.0019,100
tw91h,con_hh,0.2809,0.0019,100
tw91h,con_sqrt,0.242,0.002,100
tw91h,con_pc,0.2692,0.0021,100
[1] "Loading dataset tw95h..."
tw95h,market_hh,0.3704,0.0026,100
tw95h,market_sqrt,0.3138,0.0021,100
tw95h,market_pc,0.3358,0.0024,100
tw95h,disp_hh,0.3357,0.002,100
tw95h,disp_sqrt,0.2842,0.0021,100
tw95h,disp_pc,0.3056,0.002,100
tw95h,con_hh,0.296,0.002,100
tw95h,con_sqrt,0.2451,0.0018,100
tw95h,con_pc,0.2673,0.0019,100
[1] "Loading dataset tw97h..."
tw97h,market_hh,0.354,0.0022,100
tw97h,market_sqrt,0.2996,0.0021,100
tw97h,market_pc,0.3189,0.0023,100
tw97h,disp_hh,0.3344,0.0024,100
tw97h,disp_sqrt,0.2873,0.0021,100
tw97h,disp_pc,0.3082,0.0023,100
tw97h,con_hh,0.2865,0.0018,100
tw97h,con_sqrt,0.2289,0.0019,100
tw97h,con_pc,0.2519,0.0019,100
[1] "Loading dataset tw00h..."
tw00h,market_hh,0.3657,0.0027,100
tw00h,market_sqrt,0.3058,0.0023,100
tw00h,market_pc,0.3256,0.0023,100
tw00h,disp_hh,0.3409,0.0023,100
tw00h,disp_sqrt,0.2889,0.0024,100
tw00h,disp_pc,0.311,0.0021,100
tw00h,con_hh,0.2916,0.0019,100
tw00h,con_sqrt,0.2264,0.0019,100
tw00h,con_pc,0.2478,0.0019,100
[1] "Loading dataset tw05h..."
tw05h,market_hh,0.3845,0.0026,100
tw05h,market_sqrt,0.3235,0.0024,100
tw05h,market_pc,0.3375,0.0023,100
tw05h,disp_hh,0.3591,0.0024,100
tw05h,disp_sqrt,0.3051,0.0023,100
tw05h,disp_pc,0.3215,0.0025,100
tw05h,con_hh,0.2888,0.0021,100
tw05h,con_sqrt,0.2215,0.0018,100
tw05h,con_pc,0.2381,0.0017,100
[1] "Loading dataset tw07h..."
tw07h,market_hh,0.3909,0.0027,110
tw07h,market_sqrt,0.3284,0.0021,110
tw07h,market_pc,0.3392,0.0023,110
tw07h,disp_hh,0.359,0.0021,110
tw07h,disp_sqrt,0.3066,0.002,110
tw07h,disp_pc,0.3209,0.0021,110
tw07h,con_hh,0.2814,0.002,110
tw07h,con_sqrt,0.2103,0.0017,110
tw07h,con_pc,0.2236,0.0016,110
[1] "Loading dataset tw10h..."
tw10h,market_hh,0.3938,0.0027,110
tw10h,market_sqrt,0.3289,0.0025,110
tw10h,market_pc,0.3399,0.0025,110
tw10h,disp_hh,0.3708,0.0021,110
tw10h,disp_sqrt,0.3166,0.0022,110
tw10h,disp_pc,0.3319,0.0024,110
tw10h,con_hh,0.2877,0.0017,110
tw10h,con_sqrt,0.2177,0.0017,110
tw10h,con_pc,0.231,0.0016,110
[1] "Loading dataset tw13h..."
tw13h,market_hh,0.4014,0.0026,110
tw13h,market_sqrt,0.3323,0.0026,110
tw13h,market_pc,0.3443,0.0025,110
tw13h,disp_hh,0.3652,0.0023,110
tw13h,disp_sqrt,0.3074,0.002,110
tw13h,disp_pc,0.3245,0.0022,110
tw13h,con_hh,0.2896,0.0016,110
tw13h,con_sqrt,0.2172,0.0018,110
tw13h,con_pc,0.2294,0.0018,110
> 
> proc.time()
   user  system elapsed 
174.080   0.354 184.477 


