From: postbox@lisdatacenter.org
Subject: job 538793 pe
Date: June 15, 2018 at 4:00:36 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("pe") 
[1] "Loading dataset pe04h..."
pe04h,market_hh,0.5698,0.0037,110
pe04h,market_sqrt,0.541,0.0047,110
pe04h,market_pc,0.5601,0.0047,110
pe04h,market_oecdm,0.5414,0.0045,110
pe04h,market_ae,0.5476,0.0044,110
pe04h,gross_hh,0.5508,0.004,110
pe04h,gross_sqrt,0.5274,0.0042,110
pe04h,gross_pc,0.549,0.0043,110
pe04h,gross_oecdm,0.5278,0.0045,110
pe04h,gross_ae,0.5349,0.0046,110
pe04h,disp_hh,0.5453,0.0041,110
pe04h,disp_sqrt,0.5217,0.0041,110
pe04h,disp_pc,0.5434,0.0048,110
pe04h,disp_oecdm,0.5218,0.0042,110
pe04h,disp_ae,0.5289,0.005,110
pe04h,con_hh,0.4367,0.0042,110
pe04h,con_sqrt,0.4094,0.0041,110
pe04h,con_pc,0.4414,0.0047,110
pe04h,con_oecdm,0.4109,0.0043,110
pe04h,con_ae,0.4212,0.0054,110
[1] "Loading dataset pe07h..."
pe07h,market_hh,0.5615,0.0027,110
pe07h,market_sqrt,0.5271,0.0036,110
pe07h,market_pc,0.5448,0.0037,110
pe07h,market_oecdm,0.5262,0.0033,110
pe07h,market_ae,0.5322,0.0035,110
pe07h,gross_hh,0.5373,0.0029,110
pe07h,gross_sqrt,0.5073,0.0031,110
pe07h,gross_pc,0.5265,0.0037,110
pe07h,gross_oecdm,0.5056,0.0038,110
pe07h,gross_ae,0.5122,0.003,110
pe07h,disp_hh,0.5315,0.0031,110
pe07h,disp_sqrt,0.5009,0.0037,110
pe07h,disp_pc,0.5204,0.0039,110
pe07h,disp_oecdm,0.499,0.0039,110
pe07h,disp_ae,0.5057,0.0035,110
pe07h,con_hh,0.4295,0.0027,110
pe07h,con_sqrt,0.403,0.0031,110
pe07h,con_pc,0.4316,0.0035,110
pe07h,con_oecdm,0.4026,0.0033,110
pe07h,con_ae,0.412,0.0033,110
[1] "Loading dataset pe10h..."
pe10h,market_hh,0.5442,0.0047,110
pe10h,market_sqrt,0.5058,0.0039,110
pe10h,market_pc,0.5207,0.0045,110
pe10h,market_oecdm,0.5032,0.0043,110
pe10h,market_ae,0.5086,0.0045,110
pe10h,gross_hh,0.5186,0.0039,110
pe10h,gross_sqrt,0.4839,0.0043,110
pe10h,gross_pc,0.4997,0.0038,110
pe10h,gross_oecdm,0.4807,0.0047,110
pe10h,gross_ae,0.4864,0.0041,110
pe10h,disp_hh,0.5125,0.0043,110
pe10h,disp_sqrt,0.4774,0.004,110
pe10h,disp_pc,0.4932,0.0044,110
pe10h,disp_oecdm,0.4738,0.0044,110
pe10h,disp_ae,0.4796,0.0048,110
pe10h,con_hh,0.3961,0.0028,110
pe10h,con_sqrt,0.3656,0.0029,110
pe10h,con_pc,0.3947,0.0035,110
pe10h,con_oecdm,0.3663,0.0027,110
pe10h,con_ae,0.3755,0.0034,110
[1] "Loading dataset pe13h..."
pe13h,market_hh,0.5355,0.0033,110
pe13h,market_sqrt,0.4881,0.0034,110
pe13h,market_pc,0.5047,0.0037,110
pe13h,market_oecdm,0.4864,0.0036,110
pe13h,market_ae,0.492,0.0035,110
pe13h,gross_hh,0.5111,0.003,110
pe13h,gross_sqrt,0.4686,0.0028,110
pe13h,gross_pc,0.4859,0.0032,110
pe13h,gross_oecdm,0.4661,0.0036,110
pe13h,gross_ae,0.4721,0.0036,110
pe13h,disp_hh,0.5027,0.0028,110
pe13h,disp_sqrt,0.4596,0.0033,110
pe13h,disp_pc,0.4772,0.0036,110
pe13h,disp_oecdm,0.4568,0.0035,110
pe13h,disp_ae,0.4629,0.003,110
pe13h,con_hh,0.386,0.0023,110
pe13h,con_sqrt,0.3515,0.0021,110
pe13h,con_pc,0.3849,0.0027,110
pe13h,con_oecdm,0.3539,0.0023,110
pe13h,con_ae,0.3641,0.0021,110
> 
> proc.time()
   user  system elapsed 
353.424   1.021 536.849 


