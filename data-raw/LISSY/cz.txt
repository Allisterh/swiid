From: <postbox@lisdatacenter.org>
Subject: job 718582 cz
Date: May 3, 2020 at 11:10:18 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("cz") 
[1] "Loading dataset cz92h..."
cz92h,market_hh,0.5006,0.0031,100
cz92h,market_sqrt,0.3964,0.0026,100
cz92h,market_pc,0.4162,0.0026,100
cz92h,market_oecdm,0.3922,0.0027,100
cz92h,market_ae,0.3987,0.0029,100
cz92h,gross_hh,0.3176,0.0021,100
cz92h,gross_sqrt,0.2292,0.0023,100
cz92h,gross_pc,0.2269,0.0019,100
cz92h,gross_oecdm,0.2166,0.002,100
cz92h,gross_ae,0.2144,0.0018,100
cz92h,disp_hh,0.2951,0.0022,100
cz92h,disp_sqrt,0.2049,0.0023,100
cz92h,disp_pc,0.2063,0.0022,100
cz92h,disp_oecdm,0.1915,0.0019,100
cz92h,disp_ae,0.1897,0.0022,100
cz92h,con_hh,NaN,NA,100
cz92h,con_sqrt,NaN,NA,100
cz92h,con_pc,NaN,NA,100
cz92h,con_oecdm,NaN,NA,100
cz92h,con_ae,NaN,NA,100
[1] "Loading dataset cz96h..."
cz96h,market_hh,0.5243,0.0027,100
cz96h,market_sqrt,0.4308,0.0028,100
cz96h,market_pc,0.447,0.0024,100
cz96h,market_oecdm,0.4275,0.0028,100
cz96h,market_ae,0.4328,0.0027,100
cz96h,gross_hh,0.3661,0.0019,100
cz96h,gross_sqrt,0.2913,0.0022,100
cz96h,gross_pc,0.2882,0.0025,100
cz96h,gross_oecdm,0.2812,0.0021,100
cz96h,gross_ae,0.2796,0.0019,100
cz96h,disp_hh,0.3306,0.0019,100
cz96h,disp_sqrt,0.2554,0.0018,100
cz96h,disp_pc,0.2568,0.0019,100
cz96h,disp_oecdm,0.2446,0.002,100
cz96h,disp_ae,0.2439,0.002,100
cz96h,con_hh,NaN,NA,100
cz96h,con_sqrt,NaN,NA,100
cz96h,con_pc,NaN,NA,100
cz96h,con_oecdm,NaN,NA,100
cz96h,con_ae,NaN,NA,100
[1] "Loading dataset cz02h..."
cz02h,market_hh,0.5442,0.0041,120
cz02h,market_sqrt,0.4644,0.0052,120
cz02h,market_pc,0.484,0.0045,120
cz02h,market_oecdm,0.4627,0.0056,120
cz02h,market_ae,0.4688,0.0043,120
cz02h,gross_hh,0.3588,0.0034,120
cz02h,gross_sqrt,0.2943,0.004,120
cz02h,gross_pc,0.2989,0.0038,120
cz02h,gross_oecdm,0.2853,0.0035,120
cz02h,gross_ae,0.286,0.0032,120
cz02h,disp_hh,0.3214,0.0032,120
cz02h,disp_sqrt,0.255,0.0034,120
cz02h,disp_pc,0.265,0.0036,120
cz02h,disp_oecdm,0.2453,0.0035,120
cz02h,disp_ae,0.2474,0.0032,120
cz02h,con_hh,NaN,NA,120
cz02h,con_sqrt,NaN,NA,120
cz02h,con_pc,NaN,NA,120
cz02h,con_oecdm,NaN,NA,120
cz02h,con_ae,NaN,NA,120
[1] "Loading dataset cz04h..."
cz04h,market_hh,0.5459,0.0061,100
cz04h,market_sqrt,0.4666,0.0063,100
cz04h,market_pc,0.4857,0.0065,100
cz04h,market_oecdm,0.4654,0.0059,100
cz04h,market_ae,0.4713,0.007,100
cz04h,gross_hh,0.3658,0.0049,100
cz04h,gross_sqrt,0.3018,0.0059,100
cz04h,gross_pc,0.3041,0.0058,100
cz04h,gross_oecdm,0.2936,0.0056,100
cz04h,gross_ae,0.2935,0.0056,100
cz04h,disp_hh,0.3281,0.0051,100
cz04h,disp_sqrt,0.2644,0.0058,100
cz04h,disp_pc,0.2716,0.0057,100
cz04h,disp_oecdm,0.2555,0.0056,100
cz04h,disp_ae,0.2568,0.0055,100
cz04h,con_hh,NaN,NA,100
cz04h,con_sqrt,NaN,NA,100
cz04h,con_pc,NaN,NA,100
cz04h,con_oecdm,NaN,NA,100
cz04h,con_ae,NaN,NA,100
[1] "Loading dataset cz07h..."
cz07h,market_hh,0.5361,0.0045,100
cz07h,market_sqrt,0.4465,0.0037,100
cz07h,market_pc,0.4654,0.004,100
cz07h,market_oecdm,0.4455,0.0045,100
cz07h,market_ae,0.4512,0.0042,100
cz07h,gross_hh,0.3643,0.0028,100
cz07h,gross_sqrt,0.2905,0.0035,100
cz07h,gross_pc,0.2893,0.0035,100
cz07h,gross_oecdm,0.282,0.0034,100
cz07h,gross_ae,0.2806,0.0034,100
cz07h,disp_hh,0.3257,0.0032,100
cz07h,disp_sqrt,0.251,0.0034,100
cz07h,disp_pc,0.2546,0.0033,100
cz07h,disp_oecdm,0.2414,0.0032,100
cz07h,disp_ae,0.2411,0.0034,100
cz07h,con_hh,NaN,NA,100
cz07h,con_sqrt,NaN,NA,100
cz07h,con_pc,NaN,NA,100
cz07h,con_oecdm,NaN,NA,100
cz07h,con_ae,NaN,NA,100
[1] "Loading dataset cz10h..."
cz10h,market_hh,0.5311,0.0041,100
cz10h,market_sqrt,0.4487,0.0046,100
cz10h,market_pc,0.4698,0.0041,100
cz10h,market_oecdm,0.4505,0.004,100
cz10h,market_ae,0.4562,0.0045,100
cz10h,gross_hh,0.3547,0.0032,100
cz10h,gross_sqrt,0.2903,0.0037,100
cz10h,gross_pc,0.2959,0.0038,100
cz10h,gross_oecdm,0.2861,0.0039,100
cz10h,gross_ae,0.2861,0.0044,100
cz10h,disp_hh,0.3229,0.0034,100
cz10h,disp_sqrt,0.2564,0.0033,100
cz10h,disp_pc,0.2659,0.0033,100
cz10h,disp_oecdm,0.2519,0.004,100
cz10h,disp_ae,0.2528,0.0041,100
cz10h,con_hh,NaN,NA,100
cz10h,con_sqrt,NaN,NA,100
cz10h,con_pc,NaN,NA,100
cz10h,con_oecdm,NaN,NA,100
cz10h,con_ae,NaN,NA,100
[1] "Loading dataset cz13h..."
cz13h,market_hh,0.5452,0.0046,100
cz13h,market_sqrt,0.4576,0.0043,100
cz13h,market_pc,0.4762,0.0052,100
cz13h,market_oecdm,0.4582,0.0049,100
cz13h,market_ae,0.463,0.0053,100
cz13h,gross_hh,0.358,0.0042,100
cz13h,gross_sqrt,0.2912,0.0041,100
cz13h,gross_pc,0.2943,0.004,100
cz13h,gross_oecdm,0.2856,0.0041,100
cz13h,gross_ae,0.2846,0.0041,100
cz13h,disp_hh,0.3262,0.0035,100
cz13h,disp_sqrt,0.2571,0.0042,100
cz13h,disp_pc,0.2645,0.0041,100
cz13h,disp_oecdm,0.251,0.0042,100
cz13h,disp_ae,0.2508,0.004,100
cz13h,con_hh,NaN,NA,100
cz13h,con_sqrt,NaN,NA,100
cz13h,con_pc,NaN,NA,100
cz13h,con_oecdm,NaN,NA,100
cz13h,con_ae,NaN,NA,100
[1] "Loading dataset cz16h..."
cz16h,market_hh,0.5349,0.0041,100
cz16h,market_sqrt,0.4405,0.0042,100
cz16h,market_pc,0.4598,0.0045,100
cz16h,market_oecdm,0.4396,0.0049,100
cz16h,market_ae,0.4448,0.0044,100
cz16h,gross_hh,0.3597,0.0033,100
cz16h,gross_sqrt,0.2856,0.0037,100
cz16h,gross_pc,0.2853,0.0039,100
cz16h,gross_oecdm,0.2787,0.0036,100
cz16h,gross_ae,0.2765,0.0036,100
cz16h,disp_hh,0.3273,0.0031,100
cz16h,disp_sqrt,0.251,0.0034,100
cz16h,disp_pc,0.2541,0.0029,100
cz16h,disp_oecdm,0.2434,0.0037,100
cz16h,disp_ae,0.2416,0.0032,100
cz16h,con_hh,NaN,NA,100
cz16h,con_sqrt,NaN,NA,100
cz16h,con_pc,NaN,NA,100
cz16h,con_oecdm,NaN,NA,100
cz16h,con_ae,NaN,NA,100
> 
> proc.time()
   user  system elapsed 
117.588   0.718 120.351 


