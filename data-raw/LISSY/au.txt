From: postbox@lisdatacenter.org
Subject: job 468792 au
Date: June 27, 2017 at 2:13:11 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("au") 
[1] "Loading dataset au81h..."
au81h,market_hh,0.4635,0.0034,120
au81h,market_sqrt,0.4041,0.0023,120
au81h,market_pc,0.4407,0.0032,120
au81h,disp_hh,0.3331,0.0022,120
au81h,disp_sqrt,0.2819,0.0021,120
au81h,disp_pc,0.3133,0.0022,120
[1] "Loading dataset au85h..."
au85h,market_hh,0.4938,0.0046,120
au85h,market_sqrt,0.4353,0.0041,120
au85h,market_pc,0.4726,0.0042,120
au85h,disp_hh,0.3434,0.0032,120
au85h,disp_sqrt,0.2929,0.0033,120
au85h,disp_pc,0.3249,0.0031,120
[1] "Loading dataset au89h..."
au89h,market_hh,0.4919,0.0033,120
au89h,market_sqrt,0.4353,0.0034,120
au89h,market_pc,0.4668,0.0029,120
au89h,disp_hh,0.3528,0.0024,120
au89h,disp_sqrt,0.3037,0.0022,120
au89h,disp_pc,0.3314,0.0027,120
[1] "Loading dataset au95h..."
au95h,market_hh,0.5492,0.0067,120
au95h,market_sqrt,0.4839,0.0059,120
au95h,market_pc,0.5134,0.0057,120
au95h,disp_hh,0.379,0.0052,120
au95h,disp_sqrt,0.3175,0.005,120
au95h,disp_pc,0.3369,0.0044,120
[1] "Loading dataset au01h..."
au01h,market_hh,0.5546,0.0058,120
au01h,market_sqrt,0.4937,0.0056,120
au01h,market_pc,0.5194,0.0054,120
au01h,disp_hh,0.3804,0.0043,120
au01h,disp_sqrt,0.3222,0.0044,120
au01h,disp_pc,0.3408,0.0039,120
[1] "Loading dataset au03h..."
au03h,market_hh,0.5421,0.0039,120
au03h,market_sqrt,0.4811,0.004,120
au03h,market_pc,0.5103,0.0042,120
au03h,disp_hh,0.3748,0.0033,120
au03h,disp_sqrt,0.3168,0.0033,120
au03h,disp_pc,0.339,0.003,120
[1] "Loading dataset au08h..."
au08h,market_hh,0.5338,0.0045,120
au08h,market_sqrt,0.4758,0.0053,120
au08h,market_pc,0.502,0.0051,120
au08h,disp_hh,0.3931,0.0044,120
au08h,disp_sqrt,0.3336,0.0042,120
au08h,disp_pc,0.3536,0.004,120
[1] "Loading dataset au10h..."
au10h,market_hh,0.5392,0.0035,120
au10h,market_sqrt,0.479,0.0038,120
au10h,market_pc,0.5009,0.0038,120
au10h,disp_hh,0.388,0.0034,120
au10h,disp_sqrt,0.3309,0.003,120
au10h,disp_pc,0.3464,0.0034,120
au10h,con_hh,0.3179,0.0032,120
au10h,con_sqrt,0.2739,0.0034,120
au10h,con_pc,0.3033,0.0036,120
> 
> proc.time()
   user  system elapsed 
 74.058   0.278  78.047 


