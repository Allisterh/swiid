From: postbox@lisdatacenter.org
Subject: job 472309 fi
Date: July 17, 2017 at 3:18:20 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("fi") 
[1] "Loading dataset fi87h..."
fi87h,market_hh,0.4944,0.0039,110
fi87h,market_sqrt,0.3882,0.0032,110
fi87h,market_pc,0.4117,0.0033,110
fi87h,market_oecdm,0.3859,0.0034,110
fi87h,market_ae,0.3906,0.0034,110
fi87h,gross_hh,0.3519,0.0025,110
fi87h,gross_sqrt,0.2581,0.0019,110
fi87h,gross_pc,0.2706,0.0022,110
fi87h,gross_oecdm,0.252,0.0018,110
fi87h,gross_ae,0.2516,0.0018,110
fi87h,disp_hh,0.3113,0.0028,110
fi87h,disp_sqrt,0.2067,0.0018,110
fi87h,disp_pc,0.2215,0.0017,110
fi87h,disp_oecdm,0.1994,0.0017,110
fi87h,disp_ae,0.1984,0.0014,110
[1] "Loading dataset fi91h..."
fi91h,market_hh,0.5118,0.004,110
fi91h,market_sqrt,0.4072,0.0038,110
fi91h,market_pc,0.4323,0.0029,110
fi91h,market_oecdm,0.4045,0.0033,110
fi91h,market_ae,0.4098,0.0037,110
fi91h,gross_hh,0.351,0.0024,110
fi91h,gross_sqrt,0.2568,0.0019,110
fi91h,gross_pc,0.2731,0.002,110
fi91h,gross_oecdm,0.2513,0.0018,110
fi91h,gross_ae,0.2515,0.002,110
fi91h,disp_hh,0.314,0.002,110
fi91h,disp_sqrt,0.2095,0.0015,110
fi91h,disp_pc,0.2295,0.0018,110
fi91h,disp_oecdm,0.2037,0.0015,110
fi91h,disp_ae,0.2037,0.0017,110
[1] "Loading dataset fi95h..."
fi95h,market_hh,0.5727,0.0045,110
fi95h,market_sqrt,0.4765,0.0043,110
fi95h,market_pc,0.5009,0.0043,110
fi95h,market_oecdm,0.4761,0.0039,110
fi95h,market_ae,0.4828,0.0045,110
fi95h,gross_hh,0.3579,0.0025,110
fi95h,gross_sqrt,0.2698,0.0028,110
fi95h,gross_pc,0.2834,0.0026,110
fi95h,gross_oecdm,0.265,0.0027,110
fi95h,gross_ae,0.266,0.0023,110
fi95h,disp_hh,0.3142,0.0029,110
fi95h,disp_sqrt,0.2162,0.0028,110
fi95h,disp_pc,0.2337,0.0028,110
fi95h,disp_oecdm,0.2103,0.003,110
fi95h,disp_ae,0.211,0.0024,110
[1] "Loading dataset fi00h..."
fi00h,market_hh,0.5584,0.0046,110
fi00h,market_sqrt,0.4673,0.0047,110
fi00h,market_pc,0.4921,0.0036,110
fi00h,market_oecdm,0.4672,0.0039,110
fi00h,market_ae,0.4736,0.0038,110
fi00h,gross_hh,0.3745,0.0029,110
fi00h,gross_sqrt,0.293,0.0026,110
fi00h,gross_pc,0.3057,0.0026,110
fi00h,gross_oecdm,0.2886,0.0025,110
fi00h,gross_ae,0.2897,0.0029,110
fi00h,disp_hh,0.3374,0.0026,110
fi00h,disp_sqrt,0.2496,0.0025,110
fi00h,disp_pc,0.2657,0.0025,110
fi00h,disp_oecdm,0.2442,0.0024,110
fi00h,disp_ae,0.2454,0.0028,110
[1] "Loading dataset fi04h..."
fi04h,market_hh,0.5643,0.0037,110
fi04h,market_sqrt,0.4709,0.0043,110
fi04h,market_pc,0.4943,0.0038,110
fi04h,market_oecdm,0.4709,0.0042,110
fi04h,market_ae,0.4769,0.0036,110
fi04h,gross_hh,0.3795,0.0028,110
fi04h,gross_sqrt,0.2976,0.0028,110
fi04h,gross_pc,0.3096,0.003,110
fi04h,gross_oecdm,0.2935,0.0027,110
fi04h,gross_ae,0.2943,0.0025,110
fi04h,disp_hh,0.3437,0.0028,110
fi04h,disp_sqrt,0.2556,0.0027,110
fi04h,disp_pc,0.2714,0.0025,110
fi04h,disp_oecdm,0.2506,0.0026,110
fi04h,disp_ae,0.252,0.0031,110
[1] "Loading dataset fi07h..."
fi07h,market_hh,0.5618,0.0046,110
fi07h,market_sqrt,0.4686,0.0037,110
fi07h,market_pc,0.4917,0.0039,110
fi07h,market_oecdm,0.468,0.0046,110
fi07h,market_ae,0.4741,0.0036,110
fi07h,gross_hh,0.3827,0.0028,110
fi07h,gross_sqrt,0.3015,0.0025,110
fi07h,gross_pc,0.3136,0.0031,110
fi07h,gross_oecdm,0.2971,0.003,110
fi07h,gross_ae,0.2981,0.003,110
fi07h,disp_hh,0.3494,0.0029,110
fi07h,disp_sqrt,0.2624,0.0029,110
fi07h,disp_pc,0.2779,0.0032,110
fi07h,disp_oecdm,0.2574,0.0028,110
fi07h,disp_ae,0.2589,0.0029,110
[1] "Loading dataset fi10h..."
fi10h,market_hh,0.5732,0.0046,110
fi10h,market_sqrt,0.4781,0.0041,110
fi10h,market_pc,0.5009,0.0036,110
fi10h,market_oecdm,0.4778,0.0044,110
fi10h,market_ae,0.4837,0.0046,110
fi10h,gross_hh,0.38,0.0028,110
fi10h,gross_sqrt,0.2983,0.0026,110
fi10h,gross_pc,0.3089,0.0026,110
fi10h,gross_oecdm,0.294,0.0028,110
fi10h,gross_ae,0.2944,0.003,110
fi10h,disp_hh,0.3449,0.0031,110
fi10h,disp_sqrt,0.2591,0.003,110
fi10h,disp_pc,0.2737,0.0028,110
fi10h,disp_oecdm,0.2543,0.0028,110
fi10h,disp_ae,0.2553,0.0024,110
[1] "Loading dataset fi13h..."
fi13h,market_hh,0.586,0.0041,110
fi13h,market_sqrt,0.4873,0.0042,110
fi13h,market_pc,0.5067,0.0037,110
fi13h,market_oecdm,0.4866,0.0041,110
fi13h,market_ae,0.4913,0.0041,110
fi13h,gross_hh,0.3832,0.0025,110
fi13h,gross_sqrt,0.3003,0.0026,110
fi13h,gross_pc,0.3073,0.0025,110
fi13h,gross_oecdm,0.2957,0.0025,110
fi13h,gross_ae,0.2946,0.0025,110
fi13h,disp_hh,0.3453,0.0025,110
fi13h,disp_sqrt,0.2577,0.0029,110
fi13h,disp_pc,0.2694,0.0026,110
fi13h,disp_oecdm,0.2526,0.0025,110
fi13h,disp_ae,0.2523,0.0028,110
> 
> proc.time()
   user  system elapsed 
211.709   0.426 266.423 


