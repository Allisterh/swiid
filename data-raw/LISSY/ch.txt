From: postbox@lisdatacenter.org
Subject: job 671199 ch
Date: October 30, 2019 at 11:53:55 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ch") 
[1] "Loading dataset ch82h..."
ch82h,market_hh,0.4748,0.0054,100
ch82h,market_sqrt,0.3937,0.0041,100
ch82h,market_pc,0.4321,0.004,100
ch82h,gross_hh,0.389,0.0045,100
ch82h,gross_sqrt,0.3252,0.0046,100
ch82h,gross_pc,0.3609,0.0038,100
ch82h,disp_hh,0.3722,0.0049,100
ch82h,disp_sqrt,0.3094,0.0047,100
ch82h,disp_pc,0.3481,0.005,100
ch82h,con_hh,NaN,NA,100
ch82h,con_sqrt,NaN,NA,100
ch82h,con_pc,NaN,NA,100
[1] "Loading dataset ch92h..."
ch92h,market_hh,0.4727,0.0056,100
ch92h,market_sqrt,0.404,0.006,100
ch92h,market_pc,0.4368,0.006,100
ch92h,market_oecdm,0.4028,0.0059,100
ch92h,market_ae,0.4123,0.0059,100
ch92h,gross_hh,0.3637,0.0048,100
ch92h,gross_sqrt,0.3223,0.005,100
ch92h,gross_pc,0.3605,0.0046,100
ch92h,gross_oecdm,0.3196,0.0053,100
ch92h,gross_ae,0.3305,0.0048,100
ch92h,disp_hh,0.3502,0.0052,100
ch92h,disp_sqrt,0.3092,0.0055,100
ch92h,disp_pc,0.35,0.0052,100
ch92h,disp_oecdm,0.3067,0.0054,100
ch92h,disp_ae,0.3183,0.0052,100
ch92h,con_hh,NaN,NA,100
ch92h,con_sqrt,NaN,NA,100
ch92h,con_pc,NaN,NA,100
ch92h,con_oecdm,NaN,NA,100
ch92h,con_ae,NaN,NA,100
[1] "Loading dataset ch00h..."
ch00h,market_hh,0.4481,0.0067,100
ch00h,market_sqrt,0.3884,0.0068,100
ch00h,market_pc,0.4366,0.0061,100
ch00h,market_oecdm,0.3912,0.0062,100
ch00h,market_ae,0.4062,0.0062,100
ch00h,gross_hh,0.3144,0.0051,100
ch00h,gross_sqrt,0.2767,0.0047,100
ch00h,gross_pc,0.3275,0.005,100
ch00h,gross_oecdm,0.2782,0.0052,100
ch00h,gross_ae,0.2933,0.0045,100
ch00h,disp_hh,0.3169,0.0055,100
ch00h,disp_sqrt,0.2796,0.0048,100
ch00h,disp_pc,0.3305,0.0058,100
ch00h,disp_oecdm,0.281,0.005,100
ch00h,disp_ae,0.296,0.0047,100
ch00h,con_hh,0.3145,0.0081,100
ch00h,con_sqrt,0.2895,0.0061,100
ch00h,con_pc,0.3487,0.0077,100
ch00h,con_oecdm,0.2952,0.0072,100
ch00h,con_ae,0.3124,0.0076,100
[1] "Loading dataset ch02h..."
ch02h,market_hh,0.4565,0.0069,100
ch02h,market_sqrt,0.3929,0.0063,100
ch02h,market_pc,0.4367,0.0052,100
ch02h,market_oecdm,0.3937,0.0058,100
ch02h,market_ae,0.4077,0.0061,100
ch02h,gross_hh,0.3114,0.0053,100
ch02h,gross_sqrt,0.2722,0.0043,100
ch02h,gross_pc,0.318,0.0042,100
ch02h,gross_oecdm,0.2711,0.0046,100
ch02h,gross_ae,0.2851,0.004,100
ch02h,disp_hh,0.311,0.0048,100
ch02h,disp_sqrt,0.2724,0.0048,100
ch02h,disp_pc,0.3186,0.0042,100
ch02h,disp_oecdm,0.2713,0.0046,100
ch02h,disp_ae,0.2854,0.0053,100
ch02h,con_hh,0.3109,0.0053,100
ch02h,con_sqrt,0.2873,0.0054,100
ch02h,con_pc,0.3411,0.0061,100
ch02h,con_oecdm,0.2912,0.006,100
ch02h,con_ae,0.3069,0.0061,100
[1] "Loading dataset ch04h..."
ch04h,market_hh,0.4604,0.0069,100
ch04h,market_sqrt,0.3979,0.0068,100
ch04h,market_pc,0.4452,0.0066,100
ch04h,market_oecdm,0.4002,0.0071,100
ch04h,market_ae,0.415,0.0068,100
ch04h,gross_hh,0.304,0.0047,100
ch04h,gross_sqrt,0.2645,0.0047,100
ch04h,gross_pc,0.3152,0.0047,100
ch04h,gross_oecdm,0.2652,0.0047,100
ch04h,gross_ae,0.2803,0.0053,100
ch04h,disp_hh,0.3065,0.0046,100
ch04h,disp_sqrt,0.2674,0.0041,100
ch04h,disp_pc,0.3199,0.0054,100
ch04h,disp_oecdm,0.2683,0.0051,100
ch04h,disp_ae,0.284,0.0054,100
ch04h,con_hh,0.3077,0.0045,100
ch04h,con_sqrt,0.2842,0.0056,100
ch04h,con_pc,0.3381,0.0056,100
ch04h,con_oecdm,0.2878,0.0056,100
ch04h,con_ae,0.3034,0.0056,100
[1] "Loading dataset ch07h..."
ch07h,market_hh,0.4747,0.0052,110
ch07h,market_sqrt,0.4079,0.0041,110
ch07h,market_pc,0.4448,0.0041,110
ch07h,market_oecdm,0.411,0.0046,110
ch07h,market_ae,0.4218,0.0041,110
ch07h,gross_hh,0.3476,0.0038,110
ch07h,gross_sqrt,0.3017,0.0039,110
ch07h,gross_pc,0.3362,0.0036,110
ch07h,gross_oecdm,0.3023,0.0037,110
ch07h,gross_ae,0.3118,0.0033,110
ch07h,disp_hh,0.3535,0.0034,110
ch07h,disp_sqrt,0.3098,0.0043,110
ch07h,disp_pc,0.3454,0.0038,110
ch07h,disp_oecdm,0.3106,0.0038,110
ch07h,disp_ae,0.3206,0.0041,110
ch07h,con_hh,NaN,NA,110
ch07h,con_sqrt,NaN,NA,110
ch07h,con_pc,NaN,NA,110
ch07h,con_oecdm,NaN,NA,110
ch07h,con_ae,NaN,NA,110
[1] "Loading dataset ch10h..."
ch10h,market_hh,0.4799,0.0046,110
ch10h,market_sqrt,0.4102,0.0042,110
ch10h,market_pc,0.4451,0.0039,110
ch10h,market_oecdm,0.4124,0.0049,110
ch10h,market_ae,0.4226,0.0042,110
ch10h,gross_hh,0.3409,0.0037,110
ch10h,gross_sqrt,0.2895,0.0033,110
ch10h,gross_pc,0.3207,0.0038,110
ch10h,gross_oecdm,0.2887,0.0033,110
ch10h,gross_ae,0.297,0.0033,110
ch10h,disp_hh,0.3434,0.0043,110
ch10h,disp_sqrt,0.2933,0.0045,110
ch10h,disp_pc,0.3251,0.0039,110
ch10h,disp_oecdm,0.2923,0.0044,110
ch10h,disp_ae,0.3009,0.0039,110
ch10h,con_hh,NaN,NA,110
ch10h,con_sqrt,NaN,NA,110
ch10h,con_pc,NaN,NA,110
ch10h,con_oecdm,NaN,NA,110
ch10h,con_ae,NaN,NA,110
[1] "Loading dataset ch13h..."
ch13h,market_hh,0.4948,0.0053,110
ch13h,market_sqrt,0.4239,0.0055,110
ch13h,market_pc,0.458,0.0052,110
ch13h,market_oecdm,0.4267,0.0047,110
ch13h,market_ae,0.4364,0.005,110
ch13h,gross_hh,0.3489,0.004,110
ch13h,gross_sqrt,0.2951,0.0045,110
ch13h,gross_pc,0.3264,0.0048,110
ch13h,gross_oecdm,0.295,0.0043,110
ch13h,gross_ae,0.3031,0.0042,110
ch13h,disp_hh,0.3457,0.0045,110
ch13h,disp_sqrt,0.294,0.0043,110
ch13h,disp_pc,0.3266,0.0051,110
ch13h,disp_oecdm,0.2942,0.0048,110
ch13h,disp_ae,0.3026,0.0055,110
ch13h,con_hh,NaN,NA,110
ch13h,con_sqrt,NaN,NA,110
ch13h,con_pc,NaN,NA,110
ch13h,con_oecdm,NaN,NA,110
ch13h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
 61.189   0.349  62.873 


