From: <postbox@lisdatacenter.org>
Subject: job 765505 co
Date: September 24, 2020 at 8:48:49 PM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("co") 
[1] "Loading dataset co04h..."
co04h,market_hh,0.5561,0.0072,100
co04h,market_sqrt,0.5378,0.007,100
co04h,market_pc,0.5706,0.0071,100
co04h,market_oecdm,0.5448,0.0073,100
co04h,market_ae,0.5542,0.0074,100
co04h,gross_hh,0.5353,0.0073,100
co04h,gross_sqrt,0.5285,0.0081,100
co04h,gross_pc,0.5644,0.0067,100
co04h,gross_oecdm,0.5348,0.0078,100
co04h,gross_ae,0.5453,0.0076,100
co04h,disp_hh,0.5337,0.0067,100
co04h,disp_sqrt,0.5269,0.0069,100
co04h,disp_pc,0.5633,0.0075,100
co04h,disp_oecdm,0.5331,0.0085,100
co04h,disp_ae,0.5439,0.0076,100
co04h,con_hh,NaN,NA,100
co04h,con_sqrt,NaN,NA,100
co04h,con_pc,NaN,NA,100
co04h,con_oecdm,NaN,NA,100
co04h,con_ae,NaN,NA,100
[1] "Loading dataset co07h..."
co07h,market_hh,0.5421,0.0013,100
co07h,market_sqrt,0.5287,0.0012,100
co07h,market_pc,0.563,0.0014,100
co07h,market_oecdm,0.5343,0.0012,100
co07h,market_ae,0.5444,0.0013,100
co07h,gross_hh,0.5302,0.0012,100
co07h,gross_sqrt,0.524,0.0012,100
co07h,gross_pc,0.5597,0.0013,100
co07h,gross_oecdm,0.5291,0.0013,100
co07h,gross_ae,0.5399,0.0011,100
co07h,disp_hh,0.5291,0.0013,100
co07h,disp_sqrt,0.5219,0.0013,100
co07h,disp_pc,0.5574,0.0013,100
co07h,disp_oecdm,0.5269,0.0013,100
co07h,disp_ae,0.5376,0.0012,100
co07h,con_hh,NaN,NA,100
co07h,con_sqrt,NaN,NA,100
co07h,con_pc,NaN,NA,100
co07h,con_oecdm,NaN,NA,100
co07h,con_ae,NaN,NA,100
[1] "Loading dataset co10h..."
co10h,market_hh,0.5241,0.0013,100
co10h,market_sqrt,0.5077,0.0012,100
co10h,market_pc,0.5416,0.0011,100
co10h,market_oecdm,0.5123,0.0012,100
co10h,market_ae,0.5225,0.0011,100
co10h,gross_hh,0.5109,0.001,100
co10h,gross_sqrt,0.5006,0.0013,100
co10h,gross_pc,0.5363,0.0011,100
co10h,gross_oecdm,0.5047,0.001,100
co10h,gross_ae,0.5157,0.0013,100
co10h,disp_hh,0.5068,0.0012,100
co10h,disp_sqrt,0.4957,0.0011,100
co10h,disp_pc,0.5316,0.0014,100
co10h,disp_oecdm,0.4997,0.0011,100
co10h,disp_ae,0.5107,0.0013,100
co10h,con_hh,NaN,NA,100
co10h,con_sqrt,NaN,NA,100
co10h,con_pc,NaN,NA,100
co10h,con_oecdm,NaN,NA,100
co10h,con_ae,NaN,NA,100
[1] "Loading dataset co13h..."
co13h,market_hh,0.5165,0.0013,100
co13h,market_sqrt,0.4958,0.0012,100
co13h,market_pc,0.5285,0.0014,100
co13h,market_oecdm,0.4993,0.0013,100
co13h,market_ae,0.5093,0.0015,100
co13h,gross_hh,0.5008,0.0012,100
co13h,gross_sqrt,0.4867,0.0012,100
co13h,gross_pc,0.5213,0.0014,100
co13h,gross_oecdm,0.4897,0.0014,100
co13h,gross_ae,0.5004,0.0012,100
co13h,disp_hh,0.4962,0.0011,100
co13h,disp_sqrt,0.4812,0.0015,100
co13h,disp_pc,0.5158,0.0014,100
co13h,disp_oecdm,0.484,0.0014,100
co13h,disp_ae,0.4948,0.0012,100
co13h,con_hh,NaN,NA,100
co13h,con_sqrt,NaN,NA,100
co13h,con_pc,NaN,NA,100
co13h,con_oecdm,NaN,NA,100
co13h,con_ae,NaN,NA,100
[1] "Loading dataset co16h..."
co16h,market_hh,0.5049,0.0012,100
co16h,market_sqrt,0.4789,0.0013,100
co16h,market_pc,0.5116,0.0012,100
co16h,market_oecdm,0.4821,0.0013,100
co16h,market_ae,0.492,0.0012,100
co16h,gross_hh,0.4864,0.0011,100
co16h,gross_sqrt,0.4672,0.0012,100
co16h,gross_pc,0.5023,0.0014,100
co16h,gross_oecdm,0.4701,0.0013,100
co16h,gross_ae,0.4809,0.0014,100
co16h,disp_hh,0.4804,0.0013,100
co16h,disp_sqrt,0.4603,0.0012,100
co16h,disp_pc,0.4953,0.0011,100
co16h,disp_oecdm,0.4629,0.0014,100
co16h,disp_ae,0.4737,0.0012,100
co16h,con_hh,NaN,NA,100
co16h,con_sqrt,NaN,NA,100
co16h,con_pc,NaN,NA,100
co16h,con_oecdm,NaN,NA,100
co16h,con_ae,NaN,NA,100
> 
> proc.time()
    user   system  elapsed 
1335.847    6.052 1349.338 


