From: postbox@lisdatacenter.org
Subject: job 572016 pl
Date: November 9, 2018 at 12:55:56 PM CST
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("pl") 
[1] "Loading dataset pl86h..."
pl86h,market_hh,0.4593,0.004,200
pl86h,market_sqrt,0.3669,0.0032,200
pl86h,market_pc,0.3851,0.0029,200
pl86h,gross_hh,0.3312,0.0025,200
pl86h,gross_sqrt,0.2706,0.0024,200
pl86h,gross_pc,0.2797,0.0022,200
pl86h,disp_hh,0.3312,0.0026,200
pl86h,disp_sqrt,0.2706,0.0025,200
pl86h,disp_pc,0.2797,0.0022,200
[1] "Loading dataset pl92h..."
pl92h,market_hh,0.4782,0.0048,200
pl92h,market_sqrt,0.4042,0.0045,200
pl92h,market_pc,0.4327,0.0051,200
pl92h,market_oecdm,0.4095,0.0043,200
pl92h,market_ae,0.4168,0.0045,200
pl92h,gross_hh,0.3124,0.0038,200
pl92h,gross_sqrt,0.2619,0.0036,200
pl92h,gross_pc,0.2927,0.0037,200
pl92h,gross_oecdm,0.2667,0.0034,200
pl92h,gross_ae,0.2732,0.0036,200
pl92h,disp_hh,0.3124,0.0032,200
pl92h,disp_sqrt,0.2619,0.0039,200
pl92h,disp_pc,0.2927,0.004,200
pl92h,disp_oecdm,0.2667,0.0036,200
pl92h,disp_ae,0.2732,0.0036,200
[1] "Loading dataset pl95h..."
pl95h,market_hh,0.6646,0.0063,320
pl95h,market_sqrt,0.6072,0.0069,320
pl95h,market_pc,0.6282,0.0067,320
pl95h,market_oecdm,0.611,0.007,320
pl95h,market_ae,0.6164,0.0071,320
pl95h,gross_hh,0.358,0.0029,320
pl95h,gross_sqrt,0.3332,0.0033,320
pl95h,gross_pc,0.3694,0.0038,320
pl95h,gross_oecdm,0.3376,0.0034,320
pl95h,gross_ae,0.3469,0.003,320
pl95h,disp_hh,0.3656,0.0032,320
pl95h,disp_sqrt,0.3382,0.0042,320
pl95h,disp_pc,0.3712,0.004,320
pl95h,disp_oecdm,0.3418,0.0037,320
pl95h,disp_ae,0.35,0.0036,320
[1] "Loading dataset pl99h..."
pl99h,market_hh,0.5646,0.0045,320
pl99h,market_sqrt,0.4915,0.0041,320
pl99h,market_pc,0.5174,0.0053,320
pl99h,market_oecdm,0.4981,0.0045,320
pl99h,market_ae,0.5048,0.0044,320
pl99h,gross_hh,0.3286,0.0025,320
pl99h,gross_sqrt,0.2976,0.0023,320
pl99h,gross_pc,0.3337,0.0031,320
pl99h,gross_oecdm,0.3017,0.0028,320
pl99h,gross_ae,0.3113,0.0031,320
pl99h,disp_hh,0.3273,0.003,320
pl99h,disp_sqrt,0.293,0.0033,320
pl99h,disp_pc,0.3276,0.0034,320
pl99h,disp_oecdm,0.2963,0.0035,320
pl99h,disp_ae,0.3054,0.0028,320
[1] "Loading dataset pl04h..."
pl04h,market_hh,0.6224,0.0052,320
pl04h,market_sqrt,0.5509,0.0063,320
pl04h,market_pc,0.5757,0.005,320
pl04h,market_oecdm,0.5574,0.0048,320
pl04h,market_ae,0.5638,0.0051,320
pl04h,gross_hh,0.3587,0.0027,320
pl04h,gross_sqrt,0.3296,0.0037,320
pl04h,gross_pc,0.3683,0.0028,320
pl04h,gross_oecdm,0.3359,0.0034,320
pl04h,gross_ae,0.3459,0.0029,320
pl04h,disp_hh,0.3574,0.003,320
pl04h,disp_sqrt,0.3252,0.0037,320
pl04h,disp_pc,0.3625,0.0032,320
pl04h,disp_oecdm,0.331,0.0033,320
pl04h,disp_ae,0.3405,0.0035,320
[1] "Loading dataset pl07h..."
pl07h,market_hh,0.581,0.0022,320
pl07h,market_sqrt,0.5041,0.0025,320
pl07h,market_pc,0.5303,0.0023,320
pl07h,market_oecdm,0.5119,0.0024,320
pl07h,market_ae,0.5184,0.0024,320
pl07h,gross_hh,0.3598,0.0016,320
pl07h,gross_sqrt,0.3168,0.0018,320
pl07h,gross_pc,0.3499,0.0017,320
pl07h,gross_oecdm,0.3221,0.0021,320
pl07h,gross_ae,0.3302,0.0018,320
pl07h,disp_hh,0.3597,0.0018,320
pl07h,disp_sqrt,0.3152,0.0018,320
pl07h,disp_pc,0.3473,0.0017,320
pl07h,disp_oecdm,0.3203,0.0018,320
pl07h,disp_ae,0.328,0.0018,320
[1] "Loading dataset pl10h..."
pl10h,market_hh,0.5678,0.0021,320
pl10h,market_sqrt,0.4899,0.0025,320
pl10h,market_pc,0.5179,0.0024,320
pl10h,market_oecdm,0.4988,0.0026,320
pl10h,market_ae,0.5056,0.0024,320
pl10h,gross_hh,0.361,0.0017,320
pl10h,gross_sqrt,0.3156,0.0018,320
pl10h,gross_pc,0.3476,0.0017,320
pl10h,gross_oecdm,0.3217,0.0018,320
pl10h,gross_ae,0.3291,0.0019,320
pl10h,disp_hh,0.362,0.0018,320
pl10h,disp_sqrt,0.3154,0.002,320
pl10h,disp_pc,0.3465,0.0018,320
pl10h,disp_oecdm,0.3214,0.002,320
pl10h,disp_ae,0.3285,0.0017,320
[1] "Loading dataset pl13h..."
pl13h,market_hh,0.5794,0.0039,320
pl13h,market_sqrt,0.5061,0.0038,320
pl13h,market_pc,0.5318,0.0039,320
pl13h,market_oecdm,0.5142,0.0037,320
pl13h,market_ae,0.5203,0.0035,320
pl13h,gross_hh,0.3673,0.0025,320
pl13h,gross_sqrt,0.3267,0.003,320
pl13h,gross_pc,0.3576,0.0027,320
pl13h,gross_oecdm,0.3328,0.0026,320
pl13h,gross_ae,0.3397,0.0028,320
pl13h,disp_hh,0.3682,0.0025,320
pl13h,disp_sqrt,0.3274,0.0031,320
pl13h,disp_pc,0.3578,0.0023,320
pl13h,disp_oecdm,0.3334,0.0028,320
pl13h,disp_ae,0.3402,0.0024,320
[1] "Loading dataset pl16h..."
pl16h,market_hh,0.5725,0.0035,320
pl16h,market_sqrt,0.4951,0.0035,320
pl16h,market_pc,0.5172,0.0032,320
pl16h,market_oecdm,0.5011,0.0035,320
pl16h,market_ae,0.5063,0.0034,320
pl16h,gross_hh,0.3569,0.0021,320
pl16h,gross_sqrt,0.2985,0.0026,320
pl16h,gross_pc,0.322,0.0024,320
pl16h,gross_oecdm,0.3015,0.0023,320
pl16h,gross_ae,0.3059,0.0025,320
pl16h,disp_hh,0.3581,0.0025,320
pl16h,disp_sqrt,0.2996,0.0028,320
pl16h,disp_pc,0.3225,0.0025,320
pl16h,disp_oecdm,0.3025,0.0025,320
pl16h,disp_ae,0.3067,0.0024,320
> 
> proc.time()
    user   system  elapsed 
 657.457    1.221 1632.766 


