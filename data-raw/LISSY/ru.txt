From: postbox@lisdatacenter.org
Subject: job 472332 ru
Date: July 17, 2017 at 5:04:59 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ru") 
[1] "Loading dataset ru00h..."
ru00h,market_hh,0.5879,0.0063,200
ru00h,market_sqrt,0.515,0.0068,200
ru00h,market_pc,0.5203,0.0062,200
ru00h,market_oecdm,0.516,0.0066,200
ru00h,market_ae,0.517,0.0071,200
ru00h,gross_hh,0.4659,0.0063,200
ru00h,gross_sqrt,0.4119,0.0073,200
ru00h,gross_pc,0.4105,0.0065,200
ru00h,gross_oecdm,0.4095,0.0067,200
ru00h,gross_ae,0.408,0.0073,200
ru00h,disp_hh,0.4659,0.0058,200
ru00h,disp_sqrt,0.4119,0.0063,200
ru00h,disp_pc,0.4105,0.0065,200
ru00h,disp_oecdm,0.4095,0.0068,200
ru00h,disp_ae,0.408,0.0061,200
[1] "Loading dataset ru04h..."
ru04h,market_hh,0.5843,0.0062,200
ru04h,market_sqrt,0.5001,0.0063,200
ru04h,market_pc,0.5064,0.0066,200
ru04h,market_oecdm,0.4985,0.006,200
ru04h,market_ae,0.5004,0.0063,200
ru04h,gross_hh,0.4536,0.0052,200
ru04h,gross_sqrt,0.3915,0.006,200
ru04h,gross_pc,0.3863,0.0048,200
ru04h,gross_oecdm,0.3845,0.0062,200
ru04h,gross_ae,0.3828,0.0055,200
ru04h,disp_hh,0.4536,0.0055,200
ru04h,disp_sqrt,0.3915,0.006,200
ru04h,disp_pc,0.3863,0.0051,200
ru04h,disp_oecdm,0.3845,0.0057,200
ru04h,disp_ae,0.3828,0.0061,200
[1] "Loading dataset ru07h..."
ru07h,market_hh,0.5476,0.0057,200
ru07h,market_sqrt,0.4562,0.0053,200
ru07h,market_pc,0.4631,0.0064,200
ru07h,market_oecdm,0.4553,0.0054,200
ru07h,market_ae,0.4569,0.0059,200
ru07h,gross_hh,0.4236,0.0054,200
ru07h,gross_sqrt,0.3538,0.0059,200
ru07h,gross_pc,0.3504,0.0045,200
ru07h,gross_oecdm,0.348,0.0047,200
ru07h,gross_ae,0.3462,0.0049,200
ru07h,disp_hh,0.4236,0.0045,200
ru07h,disp_sqrt,0.3538,0.0057,200
ru07h,disp_pc,0.3504,0.0047,200
ru07h,disp_oecdm,0.348,0.0046,200
ru07h,disp_ae,0.3462,0.0048,200
[1] "Loading dataset ru10h..."
ru10h,market_hh,0.5423,0.0042,200
ru10h,market_sqrt,0.4585,0.0046,200
ru10h,market_pc,0.4647,0.0046,200
ru10h,market_oecdm,0.4547,0.0049,200
ru10h,market_ae,0.4567,0.0048,200
ru10h,gross_hh,0.4001,0.0039,200
ru10h,gross_sqrt,0.3425,0.004,200
ru10h,gross_pc,0.3434,0.0041,200
ru10h,gross_oecdm,0.3337,0.0042,200
ru10h,gross_ae,0.3338,0.0036,200
ru10h,disp_hh,0.4001,0.004,200
ru10h,disp_sqrt,0.3425,0.0042,200
ru10h,disp_pc,0.3434,0.0039,200
ru10h,disp_oecdm,0.3337,0.0045,200
ru10h,disp_ae,0.3338,0.0039,200
[1] "Loading dataset ru13h..."
ru13h,market_hh,0.5659,0.0043,200
ru13h,market_sqrt,0.4653,0.0052,200
ru13h,market_pc,0.4695,0.0046,200
ru13h,market_oecdm,0.462,0.0049,200
ru13h,market_ae,0.463,0.0045,200
ru13h,gross_hh,0.4033,0.0045,200
ru13h,gross_sqrt,0.3323,0.004,200
ru13h,gross_pc,0.3282,0.0042,200
ru13h,gross_oecdm,0.3227,0.0041,200
ru13h,gross_ae,0.3208,0.0045,200
ru13h,disp_hh,0.4033,0.0036,200
ru13h,disp_sqrt,0.3323,0.0047,200
ru13h,disp_pc,0.3282,0.0043,200
ru13h,disp_oecdm,0.3227,0.0049,200
ru13h,disp_ae,0.3208,0.0039,200
> 
> proc.time()
   user  system elapsed 
 60.051   1.800  86.707 


