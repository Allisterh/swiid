From: postbox@lisdatacenter.org
Subject: job 468841 es
Date: June 27, 2017 at 4:39:45 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("es") 
[1] "Loading dataset es80h..."
es80h,market_hh,0.4747,0.003,200
es80h,market_sqrt,0.417,0.0027,200
es80h,market_pc,0.4443,0.0029,200
es80h,disp_hh,0.3529,0.0021,200
es80h,disp_sqrt,0.3178,0.0023,200
es80h,disp_pc,0.342,0.0023,200
[1] "Loading dataset es85h..."
es85h,market_hh,0.4893,0.0065,200
es85h,market_sqrt,0.4347,0.0063,200
es85h,market_pc,0.4606,0.0059,200
es85h,disp_hh,0.342,0.0048,200
es85h,disp_sqrt,0.3141,0.0059,200
es85h,disp_pc,0.3434,0.0054,200
es85h,con_hh,0.326,0.0049,200
es85h,con_sqrt,0.288,0.0048,200
es85h,con_pc,0.3117,0.005,200
[1] "Loading dataset es90h..."
es90h,market_hh,0.4924,0.0035,200
es90h,market_sqrt,0.4213,0.0034,200
es90h,market_pc,0.4405,0.0028,200
es90h,disp_hh,0.3429,0.003,200
es90h,disp_sqrt,0.3025,0.0027,200
es90h,disp_pc,0.3208,0.0027,200
es90h,con_hh,0.367,0.0028,200
es90h,con_sqrt,0.3148,0.0027,200
es90h,con_pc,0.3259,0.0025,200
[1] "Loading dataset es95h..."
es95h,market_hh,0.5693,0.0049,200
es95h,market_sqrt,0.5087,0.0058,200
es95h,market_pc,0.5272,0.0059,200
es95h,disp_hh,0.3929,0.0049,200
es95h,disp_sqrt,0.3556,0.0047,200
es95h,disp_pc,0.369,0.0047,200
[1] "Loading dataset es00h..."
es00h,market_hh,0.5506,0.0061,200
es00h,market_sqrt,0.4792,0.0053,200
es00h,market_pc,0.4963,0.0061,200
es00h,disp_hh,0.3867,0.0046,200
es00h,disp_sqrt,0.3352,0.0057,200
es00h,disp_pc,0.3418,0.0048,200
[1] "Loading dataset es04h..."
es04h,market_hh,0.5143,0.0037,200
es04h,market_sqrt,0.4525,0.0038,200
es04h,market_pc,0.4753,0.0036,200
es04h,disp_hh,0.3636,0.0029,200
es04h,disp_sqrt,0.3208,0.0027,200
es04h,disp_pc,0.3367,0.0032,200
[1] "Loading dataset es07h..."
es07h,market_hh,0.5138,0.0042,110
es07h,market_sqrt,0.4534,0.0042,110
es07h,market_pc,0.4726,0.0043,110
es07h,disp_hh,0.3534,0.003,110
es07h,disp_sqrt,0.3118,0.0034,110
es07h,disp_pc,0.3255,0.0036,110
[1] "Loading dataset es10h..."
es10h,market_hh,0.5711,0.004,110
es10h,market_sqrt,0.516,0.0046,110
es10h,market_pc,0.5335,0.004,110
es10h,disp_hh,0.3753,0.0027,110
es10h,disp_sqrt,0.3406,0.003,110
es10h,disp_pc,0.3552,0.003,110
[1] "Loading dataset es13h..."
es13h,market_hh,0.5801,0.0043,110
es13h,market_sqrt,0.5251,0.0037,110
es13h,market_pc,0.5383,0.0042,110
es13h,disp_hh,0.38,0.0033,110
es13h,disp_sqrt,0.3464,0.0031,110
es13h,disp_pc,0.3661,0.0034,110
> 
> proc.time()
   user  system elapsed 
 99.279   0.321 104.552 


