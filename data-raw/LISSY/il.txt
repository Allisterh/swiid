From: postbox@lisdatacenter.org
Subject: job 468820 il
Date: June 27, 2017 at 3:42:52 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("il") 
[1] "Loading dataset il79h..."
il79h,market_hh,0.4694,0.0072,100
il79h,market_sqrt,0.4256,0.0072,100
il79h,market_pc,0.4714,0.0069,100
il79h,disp_hh,0.3364,0.0059,100
il79h,disp_sqrt,0.3025,0.0054,100
il79h,disp_pc,0.3617,0.0065,100
[1] "Loading dataset il86h..."
il86h,market_hh,0.5181,0.0057,100
il86h,market_sqrt,0.4742,0.0045,100
il86h,market_pc,0.5093,0.0058,100
il86h,disp_hh,0.3383,0.003,100
il86h,disp_sqrt,0.3088,0.0037,100
il86h,disp_pc,0.3635,0.0041,100
[1] "Loading dataset il92h..."
il92h,market_hh,0.523,0.0049,100
il92h,market_sqrt,0.4677,0.0054,100
il92h,market_pc,0.5003,0.0048,100
il92h,disp_hh,0.3461,0.0041,100
il92h,disp_sqrt,0.3053,0.0036,100
il92h,disp_pc,0.3549,0.005,100
il92h,con_hh,0.3634,0.0034,100
il92h,con_sqrt,0.3237,0.0035,100
il92h,con_pc,0.3654,0.0044,100
[1] "Loading dataset il97h..."
il97h,market_hh,0.5479,0.0052,100
il97h,market_sqrt,0.4954,0.0058,100
il97h,market_pc,0.5276,0.0057,100
il97h,disp_hh,0.3778,0.0041,100
il97h,disp_sqrt,0.3352,0.0045,100
il97h,disp_pc,0.379,0.005,100
il97h,con_hh,0.3718,0.0037,100
il97h,con_sqrt,0.3341,0.0042,100
il97h,con_pc,0.3767,0.0035,100
[1] "Loading dataset il01h..."
il01h,market_hh,0.5788,0.0053,100
il01h,market_sqrt,0.5323,0.0056,100
il01h,market_pc,0.5569,0.005,100
il01h,disp_hh,0.3836,0.0043,100
il01h,disp_sqrt,0.3479,0.0044,100
il01h,disp_pc,0.3887,0.0053,100
il01h,con_hh,0.3289,0.0031,100
il01h,con_sqrt,0.2946,0.003,100
il01h,con_pc,0.3467,0.004,100
[1] "Loading dataset il05h..."
il05h,market_hh,0.5595,0.005,100
il05h,market_sqrt,0.5188,0.0055,100
il05h,market_pc,0.5468,0.0056,100
il05h,disp_hh,0.389,0.0039,100
il05h,disp_sqrt,0.3697,0.0039,100
il05h,disp_pc,0.413,0.0044,100
il05h,con_hh,0.3385,0.0034,100
il05h,con_sqrt,0.3084,0.0033,100
il05h,con_pc,0.3597,0.0036,100
[1] "Loading dataset il07h..."
il07h,market_hh,0.5568,0.0043,120
il07h,market_sqrt,0.5129,0.0047,120
il07h,market_pc,0.5438,0.0046,120
il07h,disp_hh,0.393,0.0038,120
il07h,disp_sqrt,0.3688,0.0039,120
il07h,disp_pc,0.4121,0.004,120
il07h,con_hh,0.3273,0.0034,120
il07h,con_sqrt,0.3048,0.0039,120
il07h,con_pc,0.3623,0.0041,120
[1] "Loading dataset il10h..."
il10h,market_hh,0.5536,0.0049,120
il10h,market_sqrt,0.5066,0.0054,120
il10h,market_pc,0.5368,0.0053,120
il10h,disp_hh,0.401,0.0038,120
il10h,disp_sqrt,0.376,0.0046,120
il10h,disp_pc,0.4165,0.0052,120
il10h,con_hh,0.3321,0.0031,120
il10h,con_sqrt,0.304,0.0041,120
il10h,con_pc,0.3567,0.0038,120
[1] "Loading dataset il12h..."
il12h,market_hh,0.5402,0.0038,120
il12h,market_sqrt,0.4965,0.0043,120
il12h,market_pc,0.5293,0.0045,120
il12h,disp_hh,0.3931,0.0035,120
il12h,disp_sqrt,0.3721,0.0034,120
il12h,disp_pc,0.4159,0.004,120
il12h,con_hh,0.3161,0.0032,120
il12h,con_sqrt,0.2914,0.0025,120
il12h,con_pc,0.3516,0.0034,120
> 
> proc.time()
   user  system elapsed 
 58.070   0.198  61.240 


