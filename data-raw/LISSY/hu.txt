From: postbox@lisdatacenter.org
Subject: job 571999 hu
Date: November 9, 2018 at 11:34:46 AM CST
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("hu") 
[1] "Loading dataset hu91h..."
hu91h,market_hh,0.5564,0.0081,200
hu91h,market_sqrt,0.4755,0.0088,200
hu91h,market_pc,0.4895,0.0094,200
hu91h,market_oecdm,0.476,0.009,200
hu91h,market_ae,0.4797,0.0087,200
hu91h,gross_hh,0.3684,0.0062,200
hu91h,gross_sqrt,0.2937,0.0064,200
hu91h,gross_pc,0.2962,0.0078,200
hu91h,gross_oecdm,0.2901,0.0078,200
hu91h,gross_ae,0.2887,0.0064,200
hu91h,disp_hh,0.3684,0.0066,200
hu91h,disp_sqrt,0.2937,0.0069,200
hu91h,disp_pc,0.2962,0.0075,200
hu91h,disp_oecdm,0.2901,0.0066,200
hu91h,disp_ae,0.2887,0.0074,200
[1] "Loading dataset hu94h..."
hu94h,market_hh,0.6113,0.0094,200
hu94h,market_sqrt,0.5364,0.0091,200
hu94h,market_pc,0.5527,0.0083,200
hu94h,market_oecdm,0.5378,0.0086,200
hu94h,market_ae,0.5422,0.0085,200
hu94h,gross_hh,0.3859,0.0065,200
hu94h,gross_sqrt,0.3244,0.0061,200
hu94h,gross_pc,0.33,0.0072,200
hu94h,gross_oecdm,0.3205,0.0074,200
hu94h,gross_ae,0.3201,0.0072,200
hu94h,disp_hh,0.3859,0.0068,200
hu94h,disp_sqrt,0.3244,0.0078,200
hu94h,disp_pc,0.33,0.0076,200
hu94h,disp_oecdm,0.3205,0.0074,200
hu94h,disp_ae,0.3201,0.0072,200
[1] "Loading dataset hu99h..."
hu99h,market_hh,0.6016,0.0085,200
hu99h,market_sqrt,0.5196,0.0083,200
hu99h,market_pc,0.5345,0.0102,200
hu99h,market_oecdm,0.5217,0.0097,200
hu99h,market_ae,0.5255,0.0082,200
hu99h,gross_hh,0.3559,0.0061,200
hu99h,gross_sqrt,0.2902,0.0084,200
hu99h,gross_pc,0.3022,0.0079,200
hu99h,gross_oecdm,0.2878,0.0073,200
hu99h,gross_ae,0.2894,0.0067,200
hu99h,disp_hh,0.3559,0.007,200
hu99h,disp_sqrt,0.2902,0.0068,200
hu99h,disp_pc,0.3022,0.0073,200
hu99h,disp_oecdm,0.2878,0.0089,200
hu99h,disp_ae,0.2894,0.0076,200
[1] "Loading dataset hu05h..."
hu05h,market_hh,0.6129,0.0096,200
hu05h,market_sqrt,0.5247,0.0096,200
hu05h,market_pc,0.5476,0.0083,200
hu05h,market_oecdm,0.529,0.0083,200
hu05h,market_ae,0.5351,0.0084,200
hu05h,gross_hh,0.3536,0.0071,200
hu05h,gross_sqrt,0.2853,0.0079,200
hu05h,gross_pc,0.3028,0.0079,200
hu05h,gross_oecdm,0.2845,0.0076,200
hu05h,gross_ae,0.2877,0.0078,200
hu05h,disp_hh,0.3536,0.0067,200
hu05h,disp_sqrt,0.2853,0.0067,200
hu05h,disp_pc,0.3028,0.0078,200
hu05h,disp_oecdm,0.2845,0.0072,200
hu05h,disp_ae,0.2877,0.0078,200
[1] "Loading dataset hu07h..."
hu07h,market_hh,0.5938,0.0094,200
hu07h,market_sqrt,0.5074,0.0096,200
hu07h,market_pc,0.5311,0.0098,200
hu07h,market_oecdm,0.5094,0.0096,200
hu07h,market_ae,0.5162,0.0089,200
hu07h,gross_hh,0.3447,0.0071,200
hu07h,gross_sqrt,0.2675,0.0063,200
hu07h,gross_pc,0.2821,0.0078,200
hu07h,gross_oecdm,0.262,0.0061,200
hu07h,gross_ae,0.2647,0.0076,200
hu07h,disp_hh,0.3447,0.0064,200
hu07h,disp_sqrt,0.2675,0.0075,200
hu07h,disp_pc,0.2821,0.0075,200
hu07h,disp_oecdm,0.262,0.0072,200
hu07h,disp_ae,0.2647,0.0066,200
[1] "Loading dataset hu09h..."
hu09h,market_hh,0.6123,0.0086,200
hu09h,market_sqrt,0.5358,0.0098,200
hu09h,market_pc,0.5589,0.0091,200
hu09h,market_oecdm,0.5365,0.0091,200
hu09h,market_ae,0.5436,0.0094,200
hu09h,gross_hh,0.3309,0.0068,200
hu09h,gross_sqrt,0.2706,0.0071,200
hu09h,gross_pc,0.2909,0.0075,200
hu09h,gross_oecdm,0.2654,0.0064,200
hu09h,gross_ae,0.2704,0.0069,200
hu09h,disp_hh,0.3309,0.0055,200
hu09h,disp_sqrt,0.2706,0.0065,200
hu09h,disp_pc,0.2909,0.0067,200
hu09h,disp_oecdm,0.2654,0.0065,200
hu09h,disp_ae,0.2704,0.0068,200
[1] "Loading dataset hu12h..."
hu12h,market_hh,0.615,0.008,200
hu12h,market_sqrt,0.5355,0.0098,200
hu12h,market_pc,0.5595,0.0092,200
hu12h,market_oecdm,0.5382,0.0093,200
hu12h,market_ae,0.5453,0.0096,200
hu12h,gross_hh,0.3428,0.0065,200
hu12h,gross_sqrt,0.2862,0.0064,200
hu12h,gross_pc,0.3071,0.0068,200
hu12h,gross_oecdm,0.2844,0.0076,200
hu12h,gross_ae,0.2891,0.0068,200
hu12h,disp_hh,0.3428,0.007,200
hu12h,disp_sqrt,0.2862,0.0068,200
hu12h,disp_pc,0.3071,0.0071,200
hu12h,disp_oecdm,0.2844,0.007,200
hu12h,disp_ae,0.2891,0.0077,200
[1] "Loading dataset hu15h..."
hu15h,market_hh,0.5675,0.0076,200
hu15h,market_sqrt,0.4813,0.0085,200
hu15h,market_pc,0.508,0.0076,200
hu15h,market_oecdm,0.4839,0.008,200
hu15h,market_ae,0.4915,0.0069,200
hu15h,gross_hh,0.3437,0.005,200
hu15h,gross_sqrt,0.2682,0.0053,200
hu15h,gross_pc,0.2812,0.0061,200
hu15h,gross_oecdm,0.2623,0.0058,200
hu15h,gross_ae,0.2647,0.0055,200
hu15h,disp_hh,0.3437,0.0054,200
hu15h,disp_sqrt,0.2682,0.0049,200
hu15h,disp_pc,0.2812,0.0067,200
hu15h,disp_oecdm,0.2623,0.006,200
hu15h,disp_ae,0.2647,0.0063,200
> 
> proc.time()
   user  system elapsed 
 44.996   0.211  51.243 


