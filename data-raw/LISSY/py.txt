From: <postbox@lisdatacenter.org>
Subject: job 765616 py
Date: September 24, 2020 at 10:55:02 PM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("py") 
[1] "Loading dataset py00h..."
py00h,market_hh,0.5179,0.0055,200
py00h,market_sqrt,0.5072,0.0069,200
py00h,market_pc,0.5402,0.0061,200
py00h,market_oecdm,0.5115,0.006,200
py00h,market_ae,0.5215,0.0066,200
py00h,gross_hh,0.5149,0.0061,200
py00h,gross_sqrt,0.5088,0.007,200
py00h,gross_pc,0.5428,0.0063,200
py00h,gross_oecdm,0.5126,0.0063,200
py00h,gross_ae,0.523,0.0065,200
py00h,disp_hh,0.5149,0.0055,200
py00h,disp_sqrt,0.5088,0.0064,200
py00h,disp_pc,0.5428,0.0062,200
py00h,disp_oecdm,0.5126,0.0067,200
py00h,disp_ae,0.523,0.0056,200
py00h,con_hh,NaN,NA,200
py00h,con_sqrt,NaN,NA,200
py00h,con_pc,NaN,NA,200
py00h,con_oecdm,NaN,NA,200
py00h,con_ae,NaN,NA,200
[1] "Loading dataset py04h..."
py04h,market_hh,0.5006,0.0046,300
py04h,market_sqrt,0.4794,0.0051,300
py04h,market_pc,0.5131,0.0046,300
py04h,market_oecdm,0.4841,0.0053,300
py04h,market_ae,0.4942,0.0055,300
py04h,gross_hh,0.4925,0.0048,300
py04h,gross_sqrt,0.4743,0.0047,300
py04h,gross_pc,0.5099,0.0048,300
py04h,gross_oecdm,0.4791,0.005,300
py04h,gross_ae,0.4898,0.0053,300
py04h,disp_hh,0.4906,0.0047,300
py04h,disp_sqrt,0.4718,0.0046,300
py04h,disp_pc,0.5075,0.0049,300
py04h,disp_oecdm,0.4764,0.0054,300
py04h,disp_ae,0.4871,0.0052,300
py04h,con_hh,NaN,NA,300
py04h,con_sqrt,NaN,NA,300
py04h,con_pc,NaN,NA,300
py04h,con_oecdm,NaN,NA,300
py04h,con_ae,NaN,NA,300
[1] "Loading dataset py07h..."
py07h,market_hh,0.4907,0.0058,200
py07h,market_sqrt,0.4744,0.0053,200
py07h,market_pc,0.5034,0.0061,200
py07h,market_oecdm,0.4774,0.0054,200
py07h,market_ae,0.4861,0.0061,200
py07h,gross_hh,0.4853,0.0051,200
py07h,gross_sqrt,0.4722,0.0055,200
py07h,gross_pc,0.5025,0.0056,200
py07h,gross_oecdm,0.4748,0.0065,200
py07h,gross_ae,0.4841,0.0054,200
py07h,disp_hh,0.4853,0.0059,200
py07h,disp_sqrt,0.4722,0.006,200
py07h,disp_pc,0.5025,0.0068,200
py07h,disp_oecdm,0.4748,0.0059,200
py07h,disp_ae,0.4841,0.0053,200
py07h,con_hh,NaN,NA,200
py07h,con_sqrt,NaN,NA,200
py07h,con_pc,NaN,NA,200
py07h,con_oecdm,NaN,NA,200
py07h,con_ae,NaN,NA,200
[1] "Loading dataset py10h..."
py10h,market_hh,0.4961,0.0052,200
py10h,market_sqrt,0.4792,0.0061,200
py10h,market_pc,0.5043,0.0059,200
py10h,market_oecdm,0.4806,0.0051,200
py10h,market_ae,0.4884,0.0066,200
py10h,gross_hh,0.4885,0.0051,200
py10h,gross_sqrt,0.4729,0.0057,200
py10h,gross_pc,0.4996,0.0048,200
py10h,gross_oecdm,0.4742,0.0064,200
py10h,gross_ae,0.4826,0.0052,200
py10h,disp_hh,0.4885,0.0053,200
py10h,disp_sqrt,0.4729,0.0052,200
py10h,disp_pc,0.4996,0.0059,200
py10h,disp_oecdm,0.4742,0.0062,200
py10h,disp_ae,0.4826,0.0055,200
py10h,con_hh,NaN,NA,200
py10h,con_sqrt,NaN,NA,200
py10h,con_pc,NaN,NA,200
py10h,con_oecdm,NaN,NA,200
py10h,con_ae,NaN,NA,200
[1] "Loading dataset py13h..."
py13h,market_hh,0.4942,0.005,200
py13h,market_sqrt,0.4729,0.0062,200
py13h,market_pc,0.4993,0.0069,200
py13h,market_oecdm,0.4751,0.0066,200
py13h,market_ae,0.4832,0.0058,200
py13h,gross_hh,0.4842,0.0055,200
py13h,gross_sqrt,0.4635,0.0056,200
py13h,gross_pc,0.4899,0.006,200
py13h,gross_oecdm,0.4648,0.0059,200
py13h,gross_ae,0.4731,0.0062,200
py13h,disp_hh,0.4842,0.0057,200
py13h,disp_sqrt,0.4635,0.0052,200
py13h,disp_pc,0.4899,0.0058,200
py13h,disp_oecdm,0.4648,0.0051,200
py13h,disp_ae,0.4731,0.0056,200
py13h,con_hh,NaN,NA,200
py13h,con_sqrt,NaN,NA,200
py13h,con_pc,NaN,NA,200
py13h,con_oecdm,NaN,NA,200
py13h,con_ae,NaN,NA,200
[1] "Loading dataset py16h..."
py16h,market_hh,0.4973,0.004,200
py16h,market_sqrt,0.4723,0.0043,200
py16h,market_pc,0.4958,0.0044,200
py16h,market_oecdm,0.4726,0.0043,200
py16h,market_ae,0.4801,0.0042,200
py16h,gross_hh,0.4826,0.0041,200
py16h,gross_sqrt,0.4592,0.0046,200
py16h,gross_pc,0.4829,0.0039,200
py16h,gross_oecdm,0.4585,0.0045,200
py16h,gross_ae,0.4664,0.0043,200
py16h,disp_hh,0.4826,0.0042,200
py16h,disp_sqrt,0.4592,0.004,200
py16h,disp_pc,0.4829,0.0048,200
py16h,disp_oecdm,0.4585,0.0047,200
py16h,disp_ae,0.4664,0.0041,200
py16h,con_hh,NaN,NA,200
py16h,con_sqrt,NaN,NA,200
py16h,con_pc,NaN,NA,200
py16h,con_oecdm,NaN,NA,200
py16h,con_ae,NaN,NA,200
> 
> proc.time()
   user  system elapsed 
 59.076   0.389  60.401 


