From: postbox@lisdatacenter.org
Subject: job 468826 no
Date: June 27, 2017 at 4:22:42 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(var > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem   
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:17))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", 
+         "disp_hh", "disp_sqrt", "disp_pc", 
+         "con_hh", "con_sqrt", "con_pc") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("no") 
[1] "Loading dataset no79h..."
no79h,market_hh,0.4804,0.0062,110
no79h,market_sqrt,0.3782,0.0056,110
no79h,market_pc,0.4232,0.0049,110
no79h,disp_hh,0.3113,0.0044,110
no79h,disp_sqrt,0.2299,0.0049,110
no79h,disp_pc,0.2736,0.0037,110
[1] "Loading dataset no86h..."
no86h,market_hh,0.4739,0.0048,110
no86h,market_sqrt,0.3629,0.0043,110
no86h,market_pc,0.3918,0.0043,110
no86h,disp_hh,0.3322,0.0032,110
no86h,disp_sqrt,0.2348,0.0028,110
no86h,disp_pc,0.2467,0.0035,110
[1] "Loading dataset no91h..."
no91h,market_hh,0.502,0.0067,110
no91h,market_sqrt,0.3923,0.0054,110
no91h,market_pc,0.4202,0.0048,110
no91h,disp_hh,0.3324,0.0037,110
no91h,disp_sqrt,0.2322,0.0044,110
no91h,disp_pc,0.2517,0.0038,110
[1] "Loading dataset no95h..."
no95h,market_hh,0.5296,0.0049,110
no95h,market_sqrt,0.4212,0.004,110
no95h,market_pc,0.4477,0.0035,110
no95h,disp_hh,0.3374,0.0033,110
no95h,disp_sqrt,0.2387,0.0032,110
no95h,disp_pc,0.2567,0.003,110
[1] "Loading dataset no00h..."
no00h,market_hh,0.5305,0.0046,110
no00h,market_sqrt,0.4247,0.0033,110
no00h,market_pc,0.4506,0.0035,110
no00h,disp_hh,0.3482,0.003,110
no00h,disp_sqrt,0.2479,0.0029,110
no00h,disp_pc,0.2642,0.0034,110
[1] "Loading dataset no04h..."
no04h,market_hh,0.5519,0.0036,110
no04h,market_sqrt,0.4555,0.0033,110
no04h,market_pc,0.4801,0.0036,110
no04h,disp_hh,0.3467,0.0028,110
no04h,disp_sqrt,0.2537,0.003,110
no04h,disp_pc,0.2733,0.003,110
[1] "Loading dataset no07h..."
no07h,market_hh,0.5407,8e-04,110
no07h,market_sqrt,0.4392,8e-04,110
no07h,market_pc,0.4627,8e-04,110
no07h,disp_hh,0.3467,6e-04,110
no07h,disp_sqrt,0.2443,7e-04,110
no07h,disp_pc,0.2623,7e-04,110
[1] "Loading dataset no10h..."
no10h,market_hh,0.5529,8e-04,110
no10h,market_sqrt,0.4484,9e-04,110
no10h,market_pc,0.469,9e-04,110
no10h,disp_hh,0.3505,7e-04,110
no10h,disp_sqrt,0.2461,8e-04,110
no10h,disp_pc,0.2618,7e-04,110
[1] "Loading dataset no13h..."
no13h,market_hh,0.5483,7e-04,110
no13h,market_sqrt,0.4474,8e-04,110
no13h,market_pc,0.4671,8e-04,110
no13h,disp_hh,0.3491,6e-04,110
no13h,disp_sqrt,0.251,6e-04,110
no13h,disp_pc,0.2677,6e-04,110
> 
> proc.time()
    user   system  elapsed 
 828.900    2.133 1534.701 


