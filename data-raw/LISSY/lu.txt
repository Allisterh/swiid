From: postbox@lisdatacenter.org
Subject: job 591466 lu
Date: December 21, 2018 at 12:19:58 PM CST
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, var) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hi, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hc, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+            "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+            "se", "ch", "tw", "uk", "us", "uy") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("lu") 
[1] "Loading dataset lu85h..."
lu85h,market_hh,0.4665,0.0084,200
lu85h,market_sqrt,0.377,0.0076,200
lu85h,market_pc,0.4134,0.0075,200
lu85h,market_oecdm,0.3814,0.0079,200
lu85h,market_ae,0.3918,0.0079,200
lu85h,gross_hh,0.2934,0.0047,200
lu85h,gross_sqrt,0.236,0.0048,200
lu85h,gross_pc,0.2667,0.0041,200
lu85h,gross_oecdm,0.2311,0.004,200
lu85h,gross_ae,0.2395,0.0048,200
lu85h,disp_hh,0.2934,0.0046,200
lu85h,disp_sqrt,0.236,0.0045,200
lu85h,disp_pc,0.2667,0.0052,200
lu85h,disp_oecdm,0.2311,0.0046,200
lu85h,disp_ae,0.2395,0.0045,200
[1] "Loading dataset lu91h..."
lu91h,market_hh,0.4583,0.0114,200
lu91h,market_sqrt,0.3735,0.01,200
lu91h,market_pc,0.4028,0.0101,200
lu91h,market_oecdm,0.3738,0.0102,200
lu91h,market_ae,0.3826,0.009,200
lu91h,gross_hh,0.2959,0.0071,200
lu91h,gross_sqrt,0.2386,0.006,200
lu91h,gross_pc,0.2677,0.0071,200
lu91h,gross_oecdm,0.2336,0.0064,200
lu91h,gross_ae,0.2421,0.0062,200
lu91h,disp_hh,0.2959,0.0072,200
lu91h,disp_sqrt,0.2386,0.0065,200
lu91h,disp_pc,0.2677,0.0071,200
lu91h,disp_oecdm,0.2336,0.0071,200
lu91h,disp_ae,0.2421,0.0054,200
[1] "Loading dataset lu94h..."
lu94h,market_hh,0.4674,0.0109,200
lu94h,market_sqrt,0.3893,0.0081,200
lu94h,market_pc,0.4231,0.0087,200
lu94h,market_oecdm,0.3926,0.0084,200
lu94h,market_ae,0.4022,0.0084,200
lu94h,gross_hh,0.2893,0.0046,200
lu94h,gross_sqrt,0.2354,0.0051,200
lu94h,gross_pc,0.2695,0.0062,200
lu94h,gross_oecdm,0.233,0.0048,200
lu94h,gross_ae,0.2421,0.0056,200
lu94h,disp_hh,0.2893,0.0056,200
lu94h,disp_sqrt,0.2354,0.0044,200
lu94h,disp_pc,0.2695,0.0055,200
lu94h,disp_oecdm,0.233,0.0056,200
lu94h,disp_ae,0.2421,0.0051,200
[1] "Loading dataset lu97h..."
lu97h,market_hh,0.5059,0.0073,200
lu97h,market_sqrt,0.4332,0.0074,200
lu97h,market_pc,0.4741,0.0083,200
lu97h,market_oecdm,0.4361,0.0071,200
lu97h,market_ae,0.4482,0.0064,200
lu97h,gross_hh,0.3091,0.0052,200
lu97h,gross_sqrt,0.2612,0.0055,200
lu97h,gross_pc,0.3016,0.0052,200
lu97h,gross_oecdm,0.259,0.0054,200
lu97h,gross_ae,0.2702,0.005,200
lu97h,disp_hh,0.3091,0.0044,200
lu97h,disp_sqrt,0.2612,0.0044,200
lu97h,disp_pc,0.3016,0.0058,200
lu97h,disp_oecdm,0.259,0.0051,200
lu97h,disp_ae,0.2702,0.0051,200
[1] "Loading dataset lu00h..."
lu00h,market_hh,0.4912,0.0087,200
lu00h,market_sqrt,0.429,0.008,200
lu00h,market_pc,0.4712,0.008,200
lu00h,market_oecdm,0.4347,0.0085,200
lu00h,market_ae,0.4466,0.0083,200
lu00h,gross_hh,0.3038,0.0055,200
lu00h,gross_sqrt,0.2621,0.0045,200
lu00h,gross_pc,0.3045,0.0058,200
lu00h,gross_oecdm,0.2637,0.005,200
lu00h,gross_ae,0.275,0.0046,200
lu00h,disp_hh,0.3038,0.0049,200
lu00h,disp_sqrt,0.2621,0.0056,200
lu00h,disp_pc,0.3045,0.0061,200
lu00h,disp_oecdm,0.2637,0.0048,200
lu00h,disp_ae,0.275,0.0055,200
[1] "Loading dataset lu04h..."
lu04h,market_hh,0.5159,0.0075,110
lu04h,market_sqrt,0.4548,0.0087,110
lu04h,market_pc,0.4953,0.0084,110
lu04h,market_oecdm,0.4595,0.0084,110
lu04h,market_ae,0.4712,0.0075,110
lu04h,gross_hh,0.3456,0.0056,110
lu04h,gross_sqrt,0.3052,0.0057,110
lu04h,gross_pc,0.3445,0.0061,110
lu04h,gross_oecdm,0.3064,0.0049,110
lu04h,gross_ae,0.3172,0.0062,110
lu04h,disp_hh,0.3176,0.006,110
lu04h,disp_sqrt,0.269,0.0054,110
lu04h,disp_pc,0.31,0.0055,110
lu04h,disp_oecdm,0.2699,0.0055,110
lu04h,disp_ae,0.2808,0.0062,110
[1] "Loading dataset lu07h..."
lu07h,market_hh,0.5155,0.0079,100
lu07h,market_sqrt,0.4563,0.0087,100
lu07h,market_pc,0.4895,0.0083,100
lu07h,market_oecdm,0.4598,0.0081,100
lu07h,market_ae,0.4691,0.0083,100
lu07h,gross_hh,0.3452,0.0071,100
lu07h,gross_sqrt,0.3088,0.007,100
lu07h,gross_pc,0.3414,0.0066,100
lu07h,gross_oecdm,0.3094,0.0079,100
lu07h,gross_ae,0.3179,0.0067,100
lu07h,disp_hh,0.3189,0.0063,100
lu07h,disp_sqrt,0.2759,0.0061,100
lu07h,disp_pc,0.3116,0.0066,100
lu07h,disp_oecdm,0.2763,0.0067,100
lu07h,disp_ae,0.2855,0.0069,100
[1] "Loading dataset lu10h..."
lu10h,market_hh,0.5192,0.0062,100
lu10h,market_sqrt,0.4625,0.0066,100
lu10h,market_pc,0.4956,0.0061,100
lu10h,market_oecdm,0.466,0.0065,100
lu10h,market_ae,0.4753,0.0061,100
lu10h,gross_hh,0.3389,0.0054,100
lu10h,gross_sqrt,0.3023,0.0049,100
lu10h,gross_pc,0.3376,0.005,100
lu10h,gross_oecdm,0.3035,0.0047,100
lu10h,gross_ae,0.313,0.0048,100
lu10h,disp_hh,0.3156,0.0048,100
lu10h,disp_sqrt,0.2713,0.0067,100
lu10h,disp_pc,0.3095,0.006,100
lu10h,disp_oecdm,0.272,0.0051,100
lu10h,disp_ae,0.2822,0.0054,100
[1] "Loading dataset lu13h..."
lu13h,market_hh,0.537,0.0069,100
lu13h,market_sqrt,0.4778,0.0058,100
lu13h,market_pc,0.5139,0.0067,100
lu13h,market_oecdm,0.4828,0.006,100
lu13h,market_ae,0.4931,0.0054,100
lu13h,gross_hh,0.344,0.0047,100
lu13h,gross_sqrt,0.3157,0.0043,100
lu13h,gross_pc,0.3584,0.0044,100
lu13h,gross_oecdm,0.3197,0.0046,100
lu13h,gross_ae,0.3314,0.0046,100
lu13h,disp_hh,0.3246,0.0048,100
lu13h,disp_sqrt,0.2863,0.0054,100
lu13h,disp_pc,0.331,0.0053,100
lu13h,disp_oecdm,0.2898,0.0051,100
lu13h,disp_ae,0.3019,0.0055,100
> 
> proc.time()
   user  system elapsed 
 70.146   0.195  84.765 


